<!DOCTYPE html>
<!-- saved from url=(0051)https://github.com/lydiahallie/javascript-questions -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
  
  
  <title>GitHub - lydiahallie/javascript-questions: A long list of (advanced) JavaScript questions, and their explanations</title>
    <meta name="description" content="A long list of (advanced) JavaScript questions, and their explanations :sparkles:   - lydiahallie/javascript-questions">
    <link rel="search" type="application/opensearchdescription+xml" href="https://github.com/opensearch.xml" title="GitHub">
  <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
<style>
.pl-k {
    color: #d73a49;
}
.pl-c1, .pl-s .pl-v {
    color: #005cc5;
}
code, pre, tt {
    font-family: SFMono-Regular,Consolas,Liberation Mono,Menlo,monospace;
    font-size: 12px;
}
.markdown-body {
    font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif,Apple Color Emoji,Segoe UI Emoji;
    font-size: 16px;
    line-height: 1.5;
    word-wrap: break-word;
}
.highlight pre, pre {
    padding: 16px;
    overflow: auto;
    font-size: 85%;
    line-height: 1.45;
    background-color: #f6f8fa;
    border-radius: 3px;
}
.markdown-body ul {
    padding-left: 2em;
    margin-top: 0;
    margin-bottom: 16px;
    margin-top: 0;
    margin-bottom: 16px;
}
code, .markdown-body tt {
    padding: .2em .4em;
    margin: 0;
    font-size: 85%;
    background-color: rgba(27,31,35,.05);
    border-radius: 3px;
}
</style>

</head>

<body>

<h6><a id="user-content-1-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#1-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>1. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">sayHi</span>() {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(name);
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(age);
  <span class="pl-k">var</span> name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>;
  <span class="pl-k">let</span> age <span class="pl-k">=</span> <span class="pl-c1">21</span>;
}

<span class="pl-en">sayHi</span>();</pre></div>
<ul>
<li>A: <code>Lydia</code> and <code>undefined</code></li>
<li>B: <code>Lydia</code> and <code>ReferenceError</code></li>
<li>C: <code>ReferenceError</code> and <code>21</code></li>
<li>D: <code>undefined</code> and <code>ReferenceError</code></li>
</ul>
<details open=""><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>Within the function, we first declare the <code>name</code> variable with the <code>var</code> keyword. This means that the variable gets hoisted (memory space is set up during the creation phase) with the default value of <code>undefined</code>, until we actually get to the line where we define the variable. We haven't defined the variable yet on the line where we try to log the <code>name</code> variable, so it still holds the value of <code>undefined</code>.</p>
<p>Variables with the <code>let</code> keyword (and <code>const</code>) are hoisted, but unlike <code>var</code>, don't get <i>initialized</i>. They are not accessible before the line we declare (initialize) them. This is called the "temporal dead zone". When we try to access the variables before they are declared, JavaScript throws a <code>ReferenceError</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-2-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#2-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>2. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">for</span> (<span class="pl-k">var</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">3</span>; i<span class="pl-k">++</span>) {
  <span class="pl-c1">setTimeout</span>(() <span class="pl-k">=&gt;</span> <span class="pl-en">console</span>.<span class="pl-c1">log</span>(i), <span class="pl-c1">1</span>);
}

<span class="pl-k">for</span> (<span class="pl-k">let</span> i <span class="pl-k">=</span> <span class="pl-c1">0</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">3</span>; i<span class="pl-k">++</span>) {
  <span class="pl-c1">setTimeout</span>(() <span class="pl-k">=&gt;</span> <span class="pl-en">console</span>.<span class="pl-c1">log</span>(i), <span class="pl-c1">1</span>);
}</pre></div>
<ul>
<li>A: <code>0 1 2</code> and <code>0 1 2</code></li>
<li>B: <code>0 1 2</code> and <code>3 3 3</code></li>
<li>C: <code>3 3 3</code> and <code>0 1 2</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>Because of the event queue in JavaScript, the <code>setTimeout</code> callback function is called <em>after</em> the loop has been executed. Since the variable <code>i</code> in the first loop was declared using the <code>var</code> keyword, this value was global. During the loop, we incremented the value of <code>i</code> by <code>1</code> each time, using the unary operator <code>++</code>. By the time the <code>setTimeout</code> callback function was invoked, <code>i</code> was equal to <code>3</code> in the first example.</p>
<p>In the second loop, the variable <code>i</code> was declared using the <code>let</code> keyword: variables declared with the <code>let</code> (and <code>const</code>) keyword are block-scoped (a block is anything between <code>{ }</code>). During each iteration, <code>i</code> will have a new value, and each value is scoped inside the loop.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-3-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#3-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>3. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">shape</span> <span class="pl-k">=</span> {
  radius<span class="pl-k">:</span> <span class="pl-c1">10</span>,
  <span class="pl-en">diameter</span>() {
    <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">radius</span> <span class="pl-k">*</span> <span class="pl-c1">2</span>;
  },
  <span class="pl-en">perimeter</span><span class="pl-k">:</span> () <span class="pl-k">=&gt;</span> <span class="pl-c1">2</span> <span class="pl-k">*</span> <span class="pl-c1">Math</span>.<span class="pl-c1">PI</span> <span class="pl-k">*</span> <span class="pl-c1">this</span>.<span class="pl-smi">radius</span>
};

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">shape</span>.<span class="pl-en">diameter</span>());
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">shape</span>.<span class="pl-en">perimeter</span>());</pre></div>
<ul>
<li>A: <code>20</code> and <code>62.83185307179586</code></li>
<li>B: <code>20</code> and <code>NaN</code></li>
<li>C: <code>20</code> and <code>63</code></li>
<li>D: <code>NaN</code> and <code>63</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>Note that the value of <code>diameter</code> is a regular function, whereas the value of <code>perimeter</code> is an arrow function.</p>
<p>With arrow functions, the <code>this</code> keyword refers to its current surrounding scope, unlike regular functions! This means that when we call <code>perimeter</code>, it doesn't refer to the shape object, but to its surrounding scope (window for example).</p>
<p>There is no value <code>radius</code> on that object, which returns <code>undefined</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-4-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#4-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>4. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">+</span><span class="pl-c1">true</span>;
<span class="pl-k">!</span><span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>;</pre></div>
<ul>
<li>A: <code>1</code> and <code>false</code></li>
<li>B: <code>false</code> and <code>NaN</code></li>
<li>C: <code>false</code> and <code>false</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>The unary plus tries to convert an operand to a number. <code>true</code> is <code>1</code>, and <code>false</code> is <code>0</code>.</p>
<p>The string <code>'Lydia'</code> is a truthy value. What we're actually asking, is "is this truthy value falsy?". This returns <code>false</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-5-which-one-is-true" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#5-which-one-is-true"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>5. Which one is true?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">bird</span> <span class="pl-k">=</span> {
  size<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>small<span class="pl-pds">"</span></span>
};

<span class="pl-k">const</span> <span class="pl-c1">mouse</span> <span class="pl-k">=</span> {
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Mickey<span class="pl-pds">"</span></span>,
  small<span class="pl-k">:</span> <span class="pl-c1">true</span>
};</pre></div>
<ul>
<li>A: <code>mouse.bird.size</code> is not valid</li>
<li>B: <code>mouse[bird.size]</code> is not valid</li>
<li>C: <code>mouse[bird["size"]]</code> is not valid</li>
<li>D: All of them are valid</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-1" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>In JavaScript, all object keys are strings (unless it's a Symbol). Even though we might not <em>type</em> them as strings, they are always converted into strings under the hood.</p>
<p>JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket <code>[</code> and keeps going until it finds the closing bracket <code>]</code>. Only then, it will evaluate the statement.</p>
<p><code>mouse[bird.size]</code>: First it evaluates <code>bird.size</code>, which is <code>"small"</code>. <code>mouse["small"]</code> returns <code>true</code></p>
<p>However, with dot notation, this doesn't happen. <code>mouse</code> does not have a key called <code>bird</code>, which means that <code>mouse.bird</code> is <code>undefined</code>. Then, we ask for the <code>size</code> using dot notation: <code>mouse.bird.size</code>. Since <code>mouse.bird</code> is <code>undefined</code>, we're actually asking <code>undefined.size</code>. This isn't valid, and will throw an error similar to <code>Cannot read property "size" of undefined</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-6-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#6-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>6. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">let</span> c <span class="pl-k">=</span> { greeting<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Hey!<span class="pl-pds">"</span></span> };
<span class="pl-k">let</span> d;

d <span class="pl-k">=</span> c;
<span class="pl-smi">c</span>.<span class="pl-smi">greeting</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Hello<span class="pl-pds">"</span></span>;
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">d</span>.<span class="pl-smi">greeting</span>);</pre></div>
<ul>
<li>A: <code>Hello</code></li>
<li>B: <code>Hey!</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
<li>E: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-2" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>In JavaScript, all objects interact by <em>reference</em> when setting them equal to each other.</p>
<p>First, variable <code>c</code> holds a value to an object. Later, we assign <code>d</code> with the same reference that <code>c</code> has to the object.</p>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f6b6f356b3066732e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f6b6f356b3066732e706e67" width="200" data-canonical-src="https://i.imgur.com/ko5k0fs.png" style="max-width:100%;"></a>
<p>When you change one object, you change all of them.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-7-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#7-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>7. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">let</span> a <span class="pl-k">=</span> <span class="pl-c1">3</span>;
<span class="pl-k">let</span> b <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Number</span>(<span class="pl-c1">3</span>);
<span class="pl-k">let</span> c <span class="pl-k">=</span> <span class="pl-c1">3</span>;

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(a <span class="pl-k">==</span> b);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(a <span class="pl-k">===</span> b);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(b <span class="pl-k">===</span> c);</pre></div>
<ul>
<li>A: <code>true</code> <code>false</code> <code>true</code></li>
<li>B: <code>false</code> <code>false</code> <code>true</code></li>
<li>C: <code>true</code> <code>false</code> <code>false</code></li>
<li>D: <code>false</code> <code>true</code> <code>true</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-1" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p><code>new Number()</code> is a built-in function constructor. Although it looks like a number, it's not really a number: it has a bunch of extra features and is an object.</p>
<p>When we use the <code>==</code> operator, it only checks whether it has the same <em>value</em>. They both have the value of <code>3</code>, so it returns <code>true</code>.</p>
<p>However, when we use the <code>===</code> operator, both value <em>and</em> type should be the same. It's not: <code>new Number()</code> is not a number, it's an <strong>object</strong>. Both return <code>false.</code></p>
<p></p>
</details>
<hr>
<h6><a id="user-content-8-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#8-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>8. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">class</span> <span class="pl-en">Chameleon</span> {
  <span class="pl-k">static</span> <span class="pl-en">colorChange</span>(<span class="pl-smi">newColor</span>) {
    <span class="pl-c1">this</span>.<span class="pl-smi">newColor</span> <span class="pl-k">=</span> newColor;
    <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-smi">newColor</span>;
  }

  <span class="pl-en">constructor</span>({ newColor <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>green<span class="pl-pds">"</span></span> } <span class="pl-k">=</span> {}) {
    <span class="pl-c1">this</span>.<span class="pl-smi">newColor</span> <span class="pl-k">=</span> newColor;
  }
}

<span class="pl-k">const</span> <span class="pl-c1">freddie</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Chameleon</span>({ newColor<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>purple<span class="pl-pds">"</span></span> });
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">freddie</span>.<span class="pl-en">colorChange</span>(<span class="pl-s"><span class="pl-pds">"</span>orange<span class="pl-pds">"</span></span>));</pre></div>
<ul>
<li>A: <code>orange</code></li>
<li>B: <code>purple</code></li>
<li>C: <code>green</code></li>
<li>D: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-1" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>The <code>colorChange</code> function is static. Static methods are designed to live only on the constructor in which they are created, and cannot be passed down to any children. Since <code>freddie</code> is a child, the function is not passed down, and not available on the <code>freddie</code> instance: a <code>TypeError</code> is thrown.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-9-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#9-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>9. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">let</span> greeting;
greetign <span class="pl-k">=</span> {}; <span class="pl-c"><span class="pl-c">//</span> Typo!</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(greetign);</pre></div>
<ul>
<li>A: <code>{}</code></li>
<li>B: <code>ReferenceError: greetign is not defined</code></li>
<li>C: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-3" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>It logs the object, because we just created an empty object on the global object! When we mistyped <code>greeting</code> as <code>greetign</code>, the JS interpreter actually saw this as <code>global.greetign = {}</code> (or <code>window.greetign = {}</code> in a browser).</p>
<p>In order to avoid this, we can use <code>"use strict"</code>. This makes sure that you have declared a variable before setting it equal to anything.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-10-what-happens-when-we-do-this" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#10-what-happens-when-we-do-this"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>10. What happens when we do this?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">bark</span>() {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>Woof!<span class="pl-pds">"</span></span>);
}

<span class="pl-smi">bark</span>.<span class="pl-smi">animal</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>dog<span class="pl-pds">"</span></span>;</pre></div>
<ul>
<li>A: Nothing, this is totally fine!</li>
<li>B: <code>SyntaxError</code>. You cannot add properties to a function this way.</li>
<li>C: <code>"Woof"</code> gets logged.</li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-4" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>This is possible in JavaScript, because functions are objects! (Everything besides primitive types are objects)</p>
<p>A function is a special type of object. The code you write yourself isn't the actual function. The function is an object with properties. This property is invocable.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-11-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#11-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>11. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">Person</span>(<span class="pl-smi">firstName</span>, <span class="pl-smi">lastName</span>) {
  <span class="pl-c1">this</span>.<span class="pl-smi">firstName</span> <span class="pl-k">=</span> firstName;
  <span class="pl-c1">this</span>.<span class="pl-smi">lastName</span> <span class="pl-k">=</span> lastName;
}

<span class="pl-k">const</span> <span class="pl-c1">member</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Person</span>(<span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Hallie<span class="pl-pds">"</span></span>);
<span class="pl-smi">Person</span>.<span class="pl-en">getFullName</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {
  <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">`</span><span class="pl-s1"><span class="pl-pse">${</span><span class="pl-c1">this</span>.<span class="pl-smi">firstName</span><span class="pl-pse">}</span></span> <span class="pl-s1"><span class="pl-pse">${</span><span class="pl-c1">this</span>.<span class="pl-smi">lastName</span><span class="pl-pse">}</span></span><span class="pl-pds">`</span></span>;
};

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">member</span>.<span class="pl-en">getFullName</span>());</pre></div>
<ul>
<li>A: <code>TypeError</code></li>
<li>B: <code>SyntaxError</code></li>
<li>C: <code>Lydia Hallie</code></li>
<li>D: <code>undefined</code> <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-5" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>You can't add properties to a constructor like you can with regular objects. If you want to add a feature to all objects at once, you have to use the prototype instead. So in this case,</p>
<div class="highlight highlight-source-js"><pre><span class="pl-smi">Person</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">getFullName</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {
  <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">`</span><span class="pl-s1"><span class="pl-pse">${</span><span class="pl-c1">this</span>.<span class="pl-smi">firstName</span><span class="pl-pse">}</span></span> <span class="pl-s1"><span class="pl-pse">${</span><span class="pl-c1">this</span>.<span class="pl-smi">lastName</span><span class="pl-pse">}</span></span><span class="pl-pds">`</span></span>;
};</pre></div>
<p>would have made <code>member.getFullName()</code> work. Why is this beneficial? Say that we added this method to the constructor itself. Maybe not every <code>Person</code> instance needed this method. This would waste a lot of memory space, since they would still have that property, which takes of memory space for each instance. Instead, if we only add it to the prototype, we just have it at one spot in memory, yet they all have access to it!</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-12-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#12-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>12. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">Person</span>(<span class="pl-smi">firstName</span>, <span class="pl-smi">lastName</span>) {
  <span class="pl-c1">this</span>.<span class="pl-smi">firstName</span> <span class="pl-k">=</span> firstName;
  <span class="pl-c1">this</span>.<span class="pl-smi">lastName</span> <span class="pl-k">=</span> lastName;
}

<span class="pl-k">const</span> <span class="pl-c1">lydia</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Person</span>(<span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Hallie<span class="pl-pds">"</span></span>);
<span class="pl-k">const</span> <span class="pl-c1">sarah</span> <span class="pl-k">=</span> <span class="pl-en">Person</span>(<span class="pl-s"><span class="pl-pds">"</span>Sarah<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>Smith<span class="pl-pds">"</span></span>);

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(lydia);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(sarah);</pre></div>
<ul>
<li>A: <code>Person {firstName: "Lydia", lastName: "Hallie"}</code> and <code>undefined</code></li>
<li>B: <code>Person {firstName: "Lydia", lastName: "Hallie"}</code> and <code>Person {firstName: "Sarah", lastName: "Smith"}</code></li>
<li>C: <code>Person {firstName: "Lydia", lastName: "Hallie"}</code> and <code>{}</code></li>
<li>D:<code>Person {firstName: "Lydia", lastName: "Hallie"}</code> and <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-6" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>For <code>sarah</code>, we didn't use the <code>new</code> keyword. When using <code>new</code>, it refers to the new empty object we create. However, if you don't add <code>new</code> it refers to the <strong>global object</strong>!</p>
<p>We said that <code>this.firstName</code> equals <code>"Sarah"</code> and <code>this.lastName</code> equals <code>"Smith"</code>. What we actually did, is defining <code>global.firstName = 'Sarah'</code> and <code>global.lastName = 'Smith'</code>. <code>sarah</code> itself is left <code>undefined</code>, since we don't return a value from the <code>Person</code> function.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-13-what-are-the-three-phases-of-event-propagation" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#13-what-are-the-three-phases-of-event-propagation"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>13. What are the three phases of event propagation?</h6>
<ul>
<li>A: Target &gt; Capturing &gt; Bubbling</li>
<li>B: Bubbling &gt; Target &gt; Capturing</li>
<li>C: Target &gt; Bubbling &gt; Capturing</li>
<li>D: Capturing &gt; Target &gt; Bubbling</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-2" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>During the <strong>capturing</strong> phase, the event goes through the ancestor elements down to the target element. It then reaches the <strong>target</strong> element, and <strong>bubbling</strong> begins.</p>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f4e31386f5267642e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f4e31386f5267642e706e67" width="200" data-canonical-src="https://i.imgur.com/N18oRgd.png" style="max-width:100%;"></a>
<p></p>
</details>
<hr>
<h6><a id="user-content-14-all-object-have-prototypes" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#14-all-object-have-prototypes"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>14. All object have prototypes.</h6>
<ul>
<li>A: true</li>
<li>B: false</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-1" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-1"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>All objects have prototypes, except for the <strong>base object</strong>. The base object is the object created by the user, or an object that is created using the <code>new</code> keyword. The base object has access to some methods and properties, such as <code>.toString</code>. This is the reason why you can use built-in JavaScript methods! All of such methods are available on the prototype. Although JavaScript can't find it directly on your object, it goes down the prototype chain and finds it there, which makes it accessible for you.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-15-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#15-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>15. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">sum</span>(<span class="pl-smi">a</span>, <span class="pl-smi">b</span>) {
  <span class="pl-k">return</span> a <span class="pl-k">+</span> b;
}

<span class="pl-en">sum</span>(<span class="pl-c1">1</span>, <span class="pl-s"><span class="pl-pds">"</span>2<span class="pl-pds">"</span></span>);</pre></div>
<ul>
<li>A: <code>NaN</code></li>
<li>B: <code>TypeError</code></li>
<li>C: <code>"12"</code></li>
<li>D: <code>3</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-2" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>JavaScript is a <strong>dynamically typed language</strong>: we don't specify what types certain variables are. Values can automatically be converted into another type without you knowing, which is called <em>implicit type coercion</em>. <strong>Coercion</strong> is converting from one type into another.</p>
<p>In this example, JavaScript converts the number <code>1</code> into a string, in order for the function to make sense and return a value. During the addition of a numeric type (<code>1</code>) and a string type (<code>'2'</code>), the number is treated as a string. We can concatenate strings like <code>"Hello" + "World"</code>, so what's happening here is <code>"1" + "2"</code> which returns <code>"12"</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-16-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#16-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>16. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">let</span> number <span class="pl-k">=</span> <span class="pl-c1">0</span>;
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(number<span class="pl-k">++</span>);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-k">++</span>number);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(number);</pre></div>
<ul>
<li>A: <code>1</code> <code>1</code> <code>2</code></li>
<li>B: <code>1</code> <code>2</code> <code>2</code></li>
<li>C: <code>0</code> <code>2</code> <code>2</code></li>
<li>D: <code>0</code> <code>1</code> <code>2</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-3" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>The <strong>postfix</strong> unary operator <code>++</code>:</p>
<ol>
<li>Returns the value (this returns <code>0</code>)</li>
<li>Increments the value (number is now <code>1</code>)</li>
</ol>
<p>The <strong>prefix</strong> unary operator <code>++</code>:</p>
<ol>
<li>Increments the value (number is now <code>2</code>)</li>
<li>Returns the value (this returns <code>2</code>)</li>
</ol>
<p>This returns <code>0 2 2</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-17-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#17-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>17. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">getPersonInfo</span>(<span class="pl-smi">one</span>, <span class="pl-smi">two</span>, <span class="pl-smi">three</span>) {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(one);
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(two);
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(three);
}

<span class="pl-k">const</span> <span class="pl-c1">person</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>;
<span class="pl-k">const</span> <span class="pl-c1">age</span> <span class="pl-k">=</span> <span class="pl-c1">21</span>;

getPersonInfo<span class="pl-s"><span class="pl-pds">`</span><span class="pl-s1"><span class="pl-pse">${</span>person<span class="pl-pse">}</span></span> is <span class="pl-s1"><span class="pl-pse">${</span>age<span class="pl-pse">}</span></span> years old<span class="pl-pds">`</span></span>;</pre></div>
<ul>
<li>A: <code>"Lydia"</code> <code>21</code> <code>["", " is ", " years old"]</code></li>
<li>B: <code>["", " is ", " years old"]</code> <code>"Lydia"</code> <code>21</code></li>
<li>C: <code>"Lydia"</code> <code>["", " is ", " years old"]</code> <code>21</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-2" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-2"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>If you use tagged template literals, the value of the first argument is always an array of the string values. The remaining arguments get the values of the passed expressions!</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-18-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#18-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>18. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">checkAge</span>(<span class="pl-smi">data</span>) {
  <span class="pl-k">if</span> (data <span class="pl-k">===</span> { age<span class="pl-k">:</span> <span class="pl-c1">18</span> }) {
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>You are an adult!<span class="pl-pds">"</span></span>);
  } <span class="pl-k">else</span> <span class="pl-k">if</span> (data <span class="pl-k">==</span> { age<span class="pl-k">:</span> <span class="pl-c1">18</span> }) {
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>You are still an adult.<span class="pl-pds">"</span></span>);
  } <span class="pl-k">else</span> {
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">`</span>Hmm.. You don't have an age I guess<span class="pl-pds">`</span></span>);
  }
}

<span class="pl-en">checkAge</span>({ age<span class="pl-k">:</span> <span class="pl-c1">18</span> });</pre></div>
<ul>
<li>A: <code>You are an adult!</code></li>
<li>B: <code>You are still an adult.</code></li>
<li>C: <code>Hmm.. You don't have an age I guess</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-4" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>When testing equality, primitives are compared by their <em>value</em>, while objects are compared by their <em>reference</em>. JavaScript checks if the objects have a reference to the same location in memory.</p>
<p>The two objects that we are comparing don't have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.</p>
<p>This is why both <code>{ age: 18 } === { age: 18 }</code> and <code>{ age: 18 } == { age: 18 }</code> return <code>false</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-19-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#19-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>19. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">getAge</span>(<span class="pl-k">...</span><span class="pl-v">args</span>) {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-k">typeof</span> args);
}

<span class="pl-en">getAge</span>(<span class="pl-c1">21</span>);</pre></div>
<ul>
<li>A: <code>"number"</code></li>
<li>B: <code>"array"</code></li>
<li>C: <code>"object"</code></li>
<li>D: <code>"NaN"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-5" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>The rest parameter (<code>...args</code>.) lets us "collect" all remaining arguments into an array. An array is an object, so <code>typeof args</code> returns <code>"object"</code></p>
<p></p>
</details>
<hr>
<h6><a id="user-content-20-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#20-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>20. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">getAge</span>() {
  <span class="pl-s"><span class="pl-pds">"</span>use strict<span class="pl-pds">"</span></span>;
  age <span class="pl-k">=</span> <span class="pl-c1">21</span>;
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(age);
}

<span class="pl-en">getAge</span>();</pre></div>
<ul>
<li>A: <code>21</code></li>
<li>B: <code>undefined</code></li>
<li>C: <code>ReferenceError</code></li>
<li>D: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-6" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>With <code>"use strict"</code>, you can make sure that you don't accidentally declare global variables. We never declared the variable <code>age</code>, and since we use <code>"use strict"</code>, it will throw a reference error. If we didn't use <code>"use strict"</code>, it would have worked, since the property <code>age</code> would have gotten added to the global object.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-21-whats-value-of-sum" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#21-whats-value-of-sum"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>21. What's value of <code>sum</code>?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">sum</span> <span class="pl-k">=</span> <span class="pl-c1">eval</span>(<span class="pl-s"><span class="pl-pds">"</span>10*10+5<span class="pl-pds">"</span></span>);</pre></div>
<ul>
<li>A: <code>105</code></li>
<li>B: <code>"105"</code></li>
<li>C: <code>TypeError</code></li>
<li>D: <code>"10*10+5"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-7" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-7"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p><code>eval</code> evaluates codes that's passed as a string. If it's an expression, like in this case, it evaluates the expression. The expression is <code>10 * 10 + 5</code>. This returns the number <code>105</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-22-how-long-is-cool_secret-accessible" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#22-how-long-is-cool_secret-accessible"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>22. How long is cool_secret accessible?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-smi">sessionStorage</span>.<span class="pl-c1">setItem</span>(<span class="pl-s"><span class="pl-pds">"</span>cool_secret<span class="pl-pds">"</span></span>, <span class="pl-c1">123</span>);</pre></div>
<ul>
<li>A: Forever, the data doesn't get lost.</li>
<li>B: When the user closes the tab.</li>
<li>C: When the user closes the entire browser, not only the tab.</li>
<li>D: When the user shuts off their computer.</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-3" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>The data stored in <code>sessionStorage</code> is removed after closing the <em>tab</em>.</p>
<p>If you used <code>localStorage</code>, the data would've been there forever, unless for example <code>localStorage.clear()</code> is invoked.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-23-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#23-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>23. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> num <span class="pl-k">=</span> <span class="pl-c1">8</span>;
<span class="pl-k">var</span> num <span class="pl-k">=</span> <span class="pl-c1">10</span>;

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(num);</pre></div>
<ul>
<li>A: <code>8</code></li>
<li>B: <code>10</code></li>
<li>C: <code>SyntaxError</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-4" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>With the <code>var</code> keyword, you can declare multiple variables with the same name. The variable will then hold the latest value.</p>
<p>You cannot do this with <code>let</code> or <code>const</code> since they're block-scoped.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-24-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#24-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>24. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">obj</span> <span class="pl-k">=</span> { <span class="pl-c1">1</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>a<span class="pl-pds">"</span></span>, <span class="pl-c1">2</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span>, <span class="pl-c1">3</span><span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span> };
<span class="pl-k">const</span> <span class="pl-c1">set</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Set</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>]);

<span class="pl-smi">obj</span>.<span class="pl-en">hasOwnProperty</span>(<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>);
<span class="pl-smi">obj</span>.<span class="pl-en">hasOwnProperty</span>(<span class="pl-c1">1</span>);
<span class="pl-smi">set</span>.<span class="pl-c1">has</span>(<span class="pl-s"><span class="pl-pds">"</span>1<span class="pl-pds">"</span></span>);
<span class="pl-smi">set</span>.<span class="pl-c1">has</span>(<span class="pl-c1">1</span>);</pre></div>
<ul>
<li>A: <code>false</code> <code>true</code> <code>false</code> <code>true</code></li>
<li>B: <code>false</code> <code>true</code> <code>true</code> <code>true</code></li>
<li>C: <code>true</code> <code>true</code> <code>false</code> <code>true</code></li>
<li>D: <code>true</code> <code>true</code> <code>true</code> <code>true</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-7" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-7"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>All object keys (excluding Symbols) are strings under the hood, even if you don't type it yourself as a string. This is why <code>obj.hasOwnProperty('1')</code> also returns true.</p>
<p>It doesn't work that way for a set. There is no <code>'1'</code> in our set: <code>set.has('1')</code> returns <code>false</code>. It has the numeric type <code>1</code>, <code>set.has(1)</code> returns <code>true</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-25-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#25-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>25. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">obj</span> <span class="pl-k">=</span> { a<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>, b<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>, a<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>three<span class="pl-pds">"</span></span> };
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(obj);</pre></div>
<ul>
<li>A: <code>{ a: "one", b: "two" }</code></li>
<li>B: <code>{ b: "two", a: "three" }</code></li>
<li>C: <code>{ a: "three", b: "two" }</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-8" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-8"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>If you have two keys with the same name, the key will be replaced. It will still be in its first position, but with the last specified value.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-26-the-javascript-global-execution-context-creates-two-things-for-you-the-global-object-and-the-this-keyword" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#26-the-javascript-global-execution-context-creates-two-things-for-you-the-global-object-and-the-this-keyword"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>26. The JavaScript global execution context creates two things for you: the global object, and the "this" keyword.</h6>
<ul>
<li>A: true</li>
<li>B: false</li>
<li>C: it depends</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-8" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-8"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>The base execution context is the global execution context: it's what's accessible everywhere in your code.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-27-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#27-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>27. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">for</span> (<span class="pl-k">let</span> i <span class="pl-k">=</span> <span class="pl-c1">1</span>; i <span class="pl-k">&lt;</span> <span class="pl-c1">5</span>; i<span class="pl-k">++</span>) {
  <span class="pl-k">if</span> (i <span class="pl-k">===</span> <span class="pl-c1">3</span>) <span class="pl-k">continue</span>;
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(i);
}</pre></div>
<ul>
<li>A: <code>1</code> <code>2</code></li>
<li>B: <code>1</code> <code>2</code> <code>3</code></li>
<li>C: <code>1</code> <code>2</code> <code>4</code></li>
<li>D: <code>1</code> <code>3</code> <code>4</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-9" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-9"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>The <code>continue</code> statement skips an iteration if a certain condition returns <code>true</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-28-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#28-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>28. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-c1">String</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">giveLydiaPizza</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> {
  <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>Just give Lydia pizza already!<span class="pl-pds">"</span></span>;
};

<span class="pl-k">const</span> <span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>;

<span class="pl-smi">name</span>.<span class="pl-en">giveLydiaPizza</span>();</pre></div>
<ul>
<li>A: <code>"Just give Lydia pizza already!"</code></li>
<li>B: <code>TypeError: not a function</code></li>
<li>C: <code>SyntaxError</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details open=""><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-9" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-9"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p><code>String</code> is a built-in constructor, which we can add properties to. I just added a method to its prototype. Primitive strings are automatically converted into a string object, generated by the string prototype function. So, all strings (string objects) have access to that method!</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-29-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#29-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>29. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">a</span> <span class="pl-k">=</span> {};
<span class="pl-k">const</span> <span class="pl-c1">b</span> <span class="pl-k">=</span> { key<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>b<span class="pl-pds">"</span></span> };
<span class="pl-k">const</span> <span class="pl-c1">c</span> <span class="pl-k">=</span> { key<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>c<span class="pl-pds">"</span></span> };

a[b] <span class="pl-k">=</span> <span class="pl-c1">123</span>;
a[c] <span class="pl-k">=</span> <span class="pl-c1">456</span>;

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(a[b]);</pre></div>
<ul>
<li>A: <code>123</code></li>
<li>B: <code>456</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details open=""><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-5" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>Object keys are automatically converted into strings. We are trying to set an object as a key to object <code>a</code>, with the value of <code>123</code>.</p>
<p>However, when we stringify an object, it becomes <code>"[Object object]"</code>. So what we are saying here, is that <code>a["Object object"] = 123</code>. Then, we can try to do the same again. <code>c</code> is another object that we are implicitly stringifying. So then, <code>a["Object object"] = 456</code>.</p>
<p>Then, we log <code>a[b]</code>, which is actually <code>a["Object object"]</code>. We just set that to <code>456</code>, so it returns <code>456</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-30-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#30-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>30. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">foo</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>First<span class="pl-pds">"</span></span>);
<span class="pl-k">const</span> <span class="pl-c1">bar</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> <span class="pl-c1">setTimeout</span>(() <span class="pl-k">=&gt;</span> <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>Second<span class="pl-pds">"</span></span>));
<span class="pl-k">const</span> <span class="pl-c1">baz</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>Third<span class="pl-pds">"</span></span>);

<span class="pl-en">bar</span>();
<span class="pl-en">foo</span>();
<span class="pl-en">baz</span>();</pre></div>
<ul>
<li>A: <code>First</code> <code>Second</code> <code>Third</code></li>
<li>B: <code>First</code> <code>Third</code> <code>Second</code></li>
<li>C: <code>Second</code> <code>First</code> <code>Third</code></li>
<li>D: <code>Second</code> <code>Third</code> <code>First</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-6" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>We have a <code>setTimeout</code> function and invoked it first. Yet, it was logged last.</p>
<p>This is because in browsers, we don't just have the runtime engine, we also have something called a <code>WebAPI</code>. The <code>WebAPI</code> gives us the <code>setTimeout</code> function to start with, and for example the DOM.</p>
<p>After the <em>callback</em> is pushed to the WebAPI, the <code>setTimeout</code> function itself (but not the callback!) is popped off the stack.</p>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f58357773484f672e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f58357773484f672e706e67" width="200" data-canonical-src="https://i.imgur.com/X5wsHOg.png" style="max-width:100%;"></a>
<p>Now, <code>foo</code> gets invoked, and <code>"First"</code> is being logged.</p>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f507663306447712e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f507663306447712e706e67" width="200" data-canonical-src="https://i.imgur.com/Pvc0dGq.png" style="max-width:100%;"></a>
<p><code>foo</code> is popped off the stack, and <code>baz</code> gets invoked. <code>"Third"</code> gets logged.</p>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f576841326243502e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f576841326243502e706e67" width="200" data-canonical-src="https://i.imgur.com/WhA2bCP.png" style="max-width:100%;"></a>
<p>The WebAPI can't just add stuff to the stack whenever it's ready. Instead, it pushes the callback function to something called the <em>queue</em>.</p>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f4e536e445a6d552e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f4e536e445a6d552e706e67" width="200" data-canonical-src="https://i.imgur.com/NSnDZmU.png" style="max-width:100%;"></a>
<p>This is where an event loop starts to work. An <strong>event loop</strong> looks at the stack and task queue. If the stack is empty, it takes the first thing on the queue and pushes it onto the stack.</p>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f757969536341492e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f757969536341492e706e67" width="200" data-canonical-src="https://i.imgur.com/uyiScAI.png" style="max-width:100%;"></a>
<p><code>bar</code> gets invoked, <code>"Second"</code> gets logged, and it's popped off the stack.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-31-what-is-the-eventtarget-when-clicking-the-button" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#31-what-is-the-eventtarget-when-clicking-the-button"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>31. What is the event.target when clicking the button?</h6>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">div</span> <span class="pl-e">onclick</span>=<span class="pl-s"><span class="pl-pds">"</span>console.log('first div')<span class="pl-pds">"</span></span>&gt;
  &lt;<span class="pl-ent">div</span> <span class="pl-e">onclick</span>=<span class="pl-s"><span class="pl-pds">"</span>console.log('second div')<span class="pl-pds">"</span></span>&gt;
    &lt;<span class="pl-ent">button</span> <span class="pl-e">onclick</span>=<span class="pl-s"><span class="pl-pds">"</span>console.log('button')<span class="pl-pds">"</span></span>&gt;
      Click!
    &lt;/<span class="pl-ent">button</span>&gt;
  &lt;/<span class="pl-ent">div</span>&gt;
&lt;/<span class="pl-ent">div</span>&gt;</pre></div>
<ul>
<li>A: Outer <code>div</code></li>
<li>B: Inner <code>div</code></li>
<li>C: <code>button</code></li>
<li>D: An array of all nested elements.</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-10" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-10"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>The deepest nested element that caused the event is the target of the event. You can stop bubbling by <code>event.stopPropagation</code></p>
<p></p>
</details>
<hr>
<h6><a id="user-content-32-when-you-click-the-paragraph-whats-the-logged-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#32-when-you-click-the-paragraph-whats-the-logged-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>32. When you click the paragraph, what's the logged output?</h6>
<div class="highlight highlight-text-html-basic"><pre>&lt;<span class="pl-ent">div</span> <span class="pl-e">onclick</span>=<span class="pl-s"><span class="pl-pds">"</span>console.log('div')<span class="pl-pds">"</span></span>&gt;
  &lt;<span class="pl-ent">p</span> <span class="pl-e">onclick</span>=<span class="pl-s"><span class="pl-pds">"</span>console.log('p')<span class="pl-pds">"</span></span>&gt;
    Click here!
  &lt;/<span class="pl-ent">p</span>&gt;
&lt;/<span class="pl-ent">div</span>&gt;</pre></div>
<ul>
<li>A: <code>p</code> <code>div</code></li>
<li>B: <code>div</code> <code>p</code></li>
<li>C: <code>p</code></li>
<li>D: <code>div</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-10" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-10"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>If we click <code>p</code>, we see two logs: <code>p</code> and <code>div</code>. During event propagation, there are 3 phases: capturing, target, and bubbling. By default, event handlers are executed in the bubbling phase (unless you set <code>useCapture</code> to <code>true</code>). It goes from the deepest nested element outwards.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-33-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#33-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>33. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">person</span> <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span> };

<span class="pl-k">function</span> <span class="pl-en">sayHi</span>(<span class="pl-smi">age</span>) {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">`</span><span class="pl-s1"><span class="pl-pse">${</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-pse">}</span></span> is <span class="pl-s1"><span class="pl-pse">${</span>age<span class="pl-pse">}</span></span><span class="pl-pds">`</span></span>);
}

<span class="pl-smi">sayHi</span>.<span class="pl-c1">call</span>(person, <span class="pl-c1">21</span>);
<span class="pl-smi">sayHi</span>.<span class="pl-en">bind</span>(person, <span class="pl-c1">21</span>);</pre></div>
<ul>
<li>A: <code>undefined is 21</code> <code>Lydia is 21</code></li>
<li>B: <code>function</code> <code>function</code></li>
<li>C: <code>Lydia is 21</code> <code>Lydia is 21</code></li>
<li>D: <code>Lydia is 21</code> <code>function</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-3" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-3"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>With both, we can pass the object to which we want the <code>this</code> keyword to refer to. However, <code>.call</code> is also <em>executed immediately</em>!</p>
<p><code>.bind.</code> returns a <em>copy</em> of the function, but with a bound context! It is not executed immediately.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-34-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#34-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>34. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">sayHi</span>() {
  <span class="pl-k">return</span> (() <span class="pl-k">=&gt;</span> <span class="pl-c1">0</span>)();
}

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-k">typeof</span> <span class="pl-en">sayHi</span>());</pre></div>
<ul>
<li>A: <code>"object"</code></li>
<li>B: <code>"number"</code></li>
<li>C: <code>"function"</code></li>
<li>D: <code>"undefined"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-7" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-7"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>The <code>sayHi</code> function returns the returned value of the immediately invoked function (IIFE). This function returned <code>0</code>, which is type <code>"number"</code>.</p>
<p>FYI: there are only 7 built-in types: <code>null</code>, <code>undefined</code>, <code>boolean</code>, <code>number</code>, <code>string</code>, <code>object</code>, and <code>symbol</code>. <code>"function"</code> is not a type, since functions are objects, it's of type <code>"object"</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-35-which-of-these-values-are-falsy" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#35-which-of-these-values-are-falsy"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>35. Which of these values are falsy?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-c1">0</span>;
<span class="pl-k">new</span> <span class="pl-en">Number</span>(<span class="pl-c1">0</span>);
(<span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>);
(<span class="pl-s"><span class="pl-pds">"</span> <span class="pl-pds">"</span></span>);
<span class="pl-k">new</span> <span class="pl-en">Boolean</span>(<span class="pl-c1">false</span>);
<span class="pl-c1">undefined</span>;</pre></div>
<ul>
<li>A: <code>0</code>, <code>''</code>, <code>undefined</code></li>
<li>B: <code>0</code>, <code>new Number(0)</code>, <code>''</code>, <code>new Boolean(false)</code>, <code>undefined</code></li>
<li>C: <code>0</code>, <code>''</code>, <code>new Boolean(false)</code>, <code>undefined</code></li>
<li>D: All of them are falsy</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-11" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-11"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>There are only six falsy values:</p>
<ul>
<li><code>undefined</code></li>
<li><code>null</code></li>
<li><code>NaN</code></li>
<li><code>0</code></li>
<li><code>''</code> (empty string)</li>
<li><code>false</code></li>
</ul>
<p>Function constructors, like <code>new Number</code> and <code>new Boolean</code> are truthy.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-36-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#36-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>36. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-k">typeof</span> <span class="pl-k">typeof</span> <span class="pl-c1">1</span>);</pre></div>
<ul>
<li>A: <code>"number"</code></li>
<li>B: <code>"string"</code></li>
<li>C: <code>"object"</code></li>
<li>D: <code>"undefined"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-8" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-8"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p><code>typeof 1</code> returns <code>"number"</code>.
<code>typeof "number"</code> returns <code>"string"</code></p>
<p></p>
</details>
<hr>
<h6><a id="user-content-37-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#37-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>37. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">numbers</span> <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>];
numbers[<span class="pl-c1">10</span>] <span class="pl-k">=</span> <span class="pl-c1">11</span>;
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(numbers);</pre></div>
<ul>
<li>A: <code>[1, 2, 3, 7 x null, 11]</code></li>
<li>B: <code>[1, 2, 3, 11]</code></li>
<li>C: <code>[1, 2, 3, 7 x empty, 11]</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-11" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-11"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>When you set a value to an element in an array that exceeds the length of the array, JavaScript creates something called "empty slots". These actually have the value of <code>undefined</code>, but you will see something like:</p>
<p><code>[1, 2, 3, 7 x empty, 11]</code></p>
<p>depending on where you run it (it's different for every browser, node, etc.)</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-38-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#38-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>38. What's the output?</h6>
<div class="highlight highlight-source-js"><pre>(() <span class="pl-k">=&gt;</span> {
  <span class="pl-k">let</span> x, y;
  <span class="pl-k">try</span> {
    <span class="pl-k">throw</span> <span class="pl-k">new</span> <span class="pl-en">Error</span>();
  } <span class="pl-k">catch</span> (x) {
    (x <span class="pl-k">=</span> <span class="pl-c1">1</span>), (y <span class="pl-k">=</span> <span class="pl-c1">2</span>);
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(x);
  }
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(x);
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(y);
})();</pre></div>
<ul>
<li>A: <code>1</code> <code>undefined</code> <code>2</code></li>
<li>B: <code>undefined</code> <code>undefined</code> <code>undefined</code></li>
<li>C: <code>1</code> <code>1</code> <code>2</code></li>
<li>D: <code>1</code> <code>undefined</code> <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-12" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-12"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>The <code>catch</code> block receives the argument <code>x</code>. This is not the same <code>x</code> as the variable when we pass arguments. This variable <code>x</code> is block-scoped.</p>
<p>Later, we set this block-scoped variable equal to <code>1</code>, and set the value of the variable <code>y</code>. Now, we log the block-scoped variable <code>x</code>, which is equal to <code>1</code>.</p>
<p>Outside of the <code>catch</code> block, <code>x</code> is still <code>undefined</code>, and <code>y</code> is <code>2</code>. When we want to <code>console.log(x)</code> outside of the <code>catch</code> block, it returns <code>undefined</code>, and <code>y</code> returns <code>2</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-39-everything-in-javascript-is-either-a" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#39-everything-in-javascript-is-either-a"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>39. Everything in JavaScript is either a...</h6>
<ul>
<li>A: primitive or object</li>
<li>B: function or object</li>
<li>C: trick question! only objects</li>
<li>D: number or object</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-13" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-13"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>JavaScript only has primitive types and objects.</p>
<p>Primitive types are <code>boolean</code>, <code>null</code>, <code>undefined</code>, <code>bigint</code>, <code>number</code>, <code>string</code>, and <code>symbol</code>.</p>
<p>What differentiates a primitive from an object is that primitives do not have any properties or methods; however, you'll note that <code>'foo'.toUpperCase()</code> evaluates to <code>'FOO'</code> and does not result in a <code>TypeError</code>. This is because when you try to access a property or method on a primitive like a string, JavaScript will implicitly wrap the object using one of the wrapper classes, i.e. <code>String</code>, and then immediately discard the wrapper after the expression evaluates. All primitives except for <code>null</code> and <code>undefined</code> exhibit this behaviour.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-40-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#40-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>40. What's the output?</h6>
<div class="highlight highlight-source-js"><pre>[[<span class="pl-c1">0</span>, <span class="pl-c1">1</span>], [<span class="pl-c1">2</span>, <span class="pl-c1">3</span>]].<span class="pl-en">reduce</span>(
  (<span class="pl-smi">acc</span>, <span class="pl-smi">cur</span>) <span class="pl-k">=&gt;</span> {
    <span class="pl-k">return</span> <span class="pl-smi">acc</span>.<span class="pl-c1">concat</span>(cur);
  },
  [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>]
);</pre></div>
<ul>
<li>A: <code>[0, 1, 2, 3, 1, 2]</code></li>
<li>B: <code>[6, 1, 2]</code></li>
<li>C: <code>[1, 2, 0, 1, 2, 3]</code></li>
<li>D: <code>[1, 2, 6]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-12" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-12"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p><code>[1, 2]</code> is our initial value. This is the value we start with, and the value of the very first <code>acc</code>. During the first round, <code>acc</code> is <code>[1,2]</code>, and <code>cur</code> is <code>[0, 1]</code>. We concatenate them, which results in <code>[1, 2, 0, 1]</code>.</p>
<p>Then, <code>[1, 2, 0, 1]</code> is <code>acc</code> and <code>[2, 3]</code> is <code>cur</code>. We concatenate them, and get <code>[1, 2, 0, 1, 2, 3]</code></p>
<p></p>
</details>
<hr>
<h6><a id="user-content-41-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#41-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>41. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">!!</span><span class="pl-c1">null</span>;
<span class="pl-k">!!</span><span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>;
<span class="pl-k">!!</span><span class="pl-c1">1</span>;</pre></div>
<ul>
<li>A: <code>false</code> <code>true</code> <code>false</code></li>
<li>B: <code>false</code> <code>false</code> <code>true</code></li>
<li>C: <code>false</code> <code>true</code> <code>true</code></li>
<li>D: <code>true</code> <code>true</code> <code>false</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-9" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-9"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p><code>null</code> is falsy. <code>!null</code> returns <code>true</code>. <code>!true</code> returns <code>false</code>.</p>
<p><code>""</code> is falsy. <code>!""</code> returns <code>true</code>. <code>!true</code> returns <code>false</code>.</p>
<p><code>1</code> is truthy. <code>!1</code> returns <code>false</code>. <code>!false</code> returns <code>true</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-42-what-does-the-setinterval-method-return-in-the-browser" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#42-what-does-the-setinterval-method-return-in-the-browser"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>42. What does the <code>setInterval</code> method return in the browser?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-c1">setInterval</span>(() <span class="pl-k">=&gt;</span> <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>Hi<span class="pl-pds">"</span></span>), <span class="pl-c1">1000</span>);</pre></div>
<ul>
<li>A: a unique id</li>
<li>B: the amount of milliseconds specified</li>
<li>C: the passed function</li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-14" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-14"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>It returns a unique id. This id can be used to clear that interval with the <code>clearInterval()</code> function.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-43-what-does-this-return" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#43-what-does-this-return"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>43. What does this return?</h6>
<div class="highlight highlight-source-js"><pre>[<span class="pl-k">...</span><span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>];</pre></div>
<ul>
<li>A: <code>["L", "y", "d", "i", "a"]</code></li>
<li>B: <code>["Lydia"]</code></li>
<li>C: <code>[[], "Lydia"]</code></li>
<li>D: <code>[["L", "y", "d", "i", "a"]]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-15" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-15"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>A string is an iterable. The spread operator maps every character of an iterable to one element.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-44-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#44-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>44. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span><span class="pl-k">*</span> <span class="pl-en">generator</span>(<span class="pl-smi">i</span>) {
  <span class="pl-k">yield</span> i;
  <span class="pl-k">yield</span> i <span class="pl-k">*</span> <span class="pl-c1">2</span>;
}

<span class="pl-k">const</span> <span class="pl-c1">gen</span> <span class="pl-k">=</span> <span class="pl-en">generator</span>(<span class="pl-c1">10</span>);

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">gen</span>.<span class="pl-c1">next</span>().<span class="pl-c1">value</span>);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">gen</span>.<span class="pl-c1">next</span>().<span class="pl-c1">value</span>);</pre></div>
<ul>
<li>A: <code>[0, 10], [10, 20]</code></li>
<li>B: <code>20, 20</code></li>
<li>C: <code>10, 20</code></li>
<li>D: <code>0, 10 and 10, 20</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-13" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-13"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>Regular functions cannot be stopped mid-way after invocation. However, a generator function can be "stopped" midway, and later continue from where it stopped. Every time a generator function encounters a <code>yield</code> keyword, the function yields the value specified after it. Note that the generator function in that case doesn’t <em>return</em> the value, it <em>yields</em> the value.</p>
<p>First, we initialize the generator function with <code>i</code> equal to <code>10</code>. We invoke the generator function using the <code>next()</code> method. The first time we invoke the generator function, <code>i</code> is equal to <code>10</code>. It encounters the first <code>yield</code> keyword: it yields the value of <code>i</code>. The generator is now "paused", and <code>10</code> gets logged.</p>
<p>Then, we invoke the function again with the <code>next()</code> method. It starts to continue where it stopped previously, still with <code>i</code> equal to <code>10</code>. Now, it encounters the next <code>yield</code> keyword, and yields <code>i * 2</code>. <code>i</code> is equal to <code>10</code>, so it returns <code>10 * 2</code>, which is <code>20</code>. This results in <code>10, 20</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-45-what-does-this-return" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#45-what-does-this-return"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>45. What does this return?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">firstPromise</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Promise</span>((<span class="pl-smi">res</span>, <span class="pl-smi">rej</span>) <span class="pl-k">=&gt;</span> {
  <span class="pl-c1">setTimeout</span>(res, <span class="pl-c1">500</span>, <span class="pl-s"><span class="pl-pds">"</span>one<span class="pl-pds">"</span></span>);
});

<span class="pl-k">const</span> <span class="pl-c1">secondPromise</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Promise</span>((<span class="pl-smi">res</span>, <span class="pl-smi">rej</span>) <span class="pl-k">=&gt;</span> {
  <span class="pl-c1">setTimeout</span>(res, <span class="pl-c1">100</span>, <span class="pl-s"><span class="pl-pds">"</span>two<span class="pl-pds">"</span></span>);
});

<span class="pl-c1">Promise</span>.<span class="pl-c1">race</span>([firstPromise, secondPromise]).<span class="pl-c1">then</span>(<span class="pl-smi">res</span> <span class="pl-k">=&gt;</span> <span class="pl-en">console</span>.<span class="pl-c1">log</span>(res));</pre></div>
<ul>
<li>A: <code>"one"</code></li>
<li>B: <code>"two"</code></li>
<li>C: <code>"two" "one"</code></li>
<li>D: <code>"one" "two"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-10" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-10"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>When we pass multiple promises to the <code>Promise.race</code> method, it resolves/rejects the <em>first</em> promise that resolves/rejects. To the <code>setTimeout</code> method, we pass a timer: 500ms for the first promise (<code>firstPromise</code>), and 100ms for the second promise (<code>secondPromise</code>). This means that the <code>secondPromise</code> resolves first with the value of <code>'two'</code>. <code>res</code> now holds the value of <code>'two'</code>, which gets logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-46-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#46-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>46. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">let</span> person <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span> };
<span class="pl-k">const</span> <span class="pl-c1">members</span> <span class="pl-k">=</span> [person];
person <span class="pl-k">=</span> <span class="pl-c1">null</span>;

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(members);</pre></div>
<ul>
<li>A: <code>null</code></li>
<li>B: <code>[null]</code></li>
<li>C: <code>[{}]</code></li>
<li>D: <code>[{ name: "Lydia" }]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-4" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-4"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>First, we declare a variable <code>person</code> with the value of an object that has a <code>name</code> property.</p>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f544d4c314d62532e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f544d4c314d62532e706e67" width="200" data-canonical-src="https://i.imgur.com/TML1MbS.png" style="max-width:100%;"></a>
<p>Then, we declare a variable called <code>members</code>. We set the first element of that array equal to the value of the <code>person</code> variable. Objects interact by <em>reference</em> when setting them equal to each other. When you assign a reference from one variable to another, you make a <em>copy</em> of that reference. (note that they don't have the <em>same</em> reference!)</p>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f465347354b33462e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f465347354b33462e706e67" width="300" data-canonical-src="https://i.imgur.com/FSG5K3F.png" style="max-width:100%;"></a>
<p>Then, we set the variable <code>person</code> equal to <code>null</code>.</p>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f73596a63734d542e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f73596a63734d542e706e67" width="300" data-canonical-src="https://i.imgur.com/sYjcsMT.png" style="max-width:100%;"></a>
<p>We are only modifying the value of the <code>person</code> variable, and not the first element in the array, since that element has a different (copied) reference to the object. The first element in <code>members</code> still holds its reference to the original object. When we log the <code>members</code> array, the first element still holds the value of the object, which gets logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-47-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#47-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>47. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">person</span> <span class="pl-k">=</span> {
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>,
  age<span class="pl-k">:</span> <span class="pl-c1">21</span>
};

<span class="pl-k">for</span> (<span class="pl-k">const</span> <span class="pl-c1">item</span> <span class="pl-k">in</span> person) {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(item);
}</pre></div>
<ul>
<li>A: <code>{ name: "Lydia" }, { age: 21 }</code></li>
<li>B: <code>"name", "age"</code></li>
<li>C: <code>"Lydia", 21</code></li>
<li>D: <code>["name", "Lydia"], ["age", 21]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-11" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-11"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>With a <code>for-in</code> loop, we can iterate through object keys, in this case <code>name</code> and <code>age</code>. Under the hood, object keys are strings (if they're not a Symbol). On every loop, we set the value of <code>item</code> equal to the current key it’s iterating over. First, <code>item</code> is equal to <code>name</code>, and gets logged. Then, <code>item</code> is equal to <code>age</code>, which gets logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-48-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#48-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>48. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-c1">3</span> <span class="pl-k">+</span> <span class="pl-c1">4</span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>5<span class="pl-pds">"</span></span>);</pre></div>
<ul>
<li>A: <code>"345"</code></li>
<li>B: <code>"75"</code></li>
<li>C: <code>12</code></li>
<li>D: <code>"12"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-12" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-12"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>Operator associativity is the order in which the compiler evaluates the expressions, either left-to-right or right-to-left. This only happens if all operators have the <em>same</em> precedence. We only have one type of operator: <code>+</code>. For addition, the associativity is left-to-right.</p>
<p><code>3 + 4</code> gets evaluated first. This results in the number <code>7</code>.</p>
<p><code>7 + '5'</code> results in <code>"75"</code> because of coercion. JavaScript converts the number <code>7</code> into a string, see question 15. We can concatenate two strings using the <code>+</code>operator. <code>"7" + "5"</code> results in <code>"75"</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-49-whats-the-value-of-num" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#49-whats-the-value-of-num"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>49. What's the value of <code>num</code>?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">num</span> <span class="pl-k">=</span> <span class="pl-c1">parseInt</span>(<span class="pl-s"><span class="pl-pds">"</span>7*6<span class="pl-pds">"</span></span>, <span class="pl-c1">10</span>);</pre></div>
<ul>
<li>A: <code>42</code></li>
<li>B: <code>"42"</code></li>
<li>C: <code>7</code></li>
<li>D: <code>NaN</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-14" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-14"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>Only the first numbers in the string is returned. Based on the <em>radix</em> (the second argument in order to specify what type of number we want to parse it to: base 10, hexadecimal, octal, binary, etc.), the <code>parseInt</code> checks whether the characters in the string are valid. Once it encounters a character that isn't a valid number in the radix, it stops parsing and ignores the following characters.</p>
<p><code>*</code> is not a valid number. It only parses <code>"7"</code> into the decimal <code>7</code>. <code>num</code> now holds the value of <code>7</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-50-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#50-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>50. What's the output`?</h6>
<div class="highlight highlight-source-js"><pre>[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>].<span class="pl-en">map</span>(<span class="pl-smi">num</span> <span class="pl-k">=&gt;</span> {
  <span class="pl-k">if</span> (<span class="pl-k">typeof</span> num <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">"</span>number<span class="pl-pds">"</span></span>) <span class="pl-k">return</span>;
  <span class="pl-k">return</span> num <span class="pl-k">*</span> <span class="pl-c1">2</span>;
});</pre></div>
<ul>
<li>A: <code>[]</code></li>
<li>B: <code>[null, null, null]</code></li>
<li>C: <code>[undefined, undefined, undefined]</code></li>
<li>D: <code>[ 3 x empty ]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-15" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-15"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>When mapping over the array, the value of <code>num</code> is equal to the element it’s currently looping over. In this case, the elements are numbers, so the condition of the if statement <code>typeof num === "number"</code> returns <code>true</code>. The map function creates a new array and inserts the values returned from the function.</p>
<p>However, we don’t return a value. When we don’t return a value from the function, the function returns <code>undefined</code>. For every element in the array, the function block gets called, so for each element we return <code>undefined</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-51-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#51-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>51. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">getInfo</span>(<span class="pl-smi">member</span>, <span class="pl-smi">year</span>) {
  <span class="pl-smi">member</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>;
  year <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1998<span class="pl-pds">"</span></span>;
}

<span class="pl-k">const</span> <span class="pl-c1">person</span> <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Sarah<span class="pl-pds">"</span></span> };
<span class="pl-k">const</span> <span class="pl-c1">birthYear</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>1997<span class="pl-pds">"</span></span>;

<span class="pl-en">getInfo</span>(person, birthYear);

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(person, birthYear);</pre></div>
<ul>
<li>A: <code>{ name: "Lydia" }, "1997"</code></li>
<li>B: <code>{ name: "Sarah" }, "1998"</code></li>
<li>C: <code>{ name: "Lydia" }, "1998"</code></li>
<li>D: <code>{ name: "Sarah" }, "1997"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-16" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-16"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>Arguments are passed by <em>value</em>, unless their value is an object, then they're passed by <em>reference</em>. <code>birthYear</code> is passed by value, since it's a string, not an object. When we pass arguments by value, a <em>copy</em> of that value is created (see question 46).</p>
<p>The variable <code>birthYear</code> has a reference to the value <code>"1997"</code>. The argument <code>year</code> also has a reference to the value <code>"1997"</code>, but it's not the same value as <code>birthYear</code> has a reference to. When we update the value of <code>year</code> by setting <code>year</code> equal to <code>"1998"</code>, we are only updating the value of <code>year</code>. <code>birthYear</code> is still equal to <code>"1997"</code>.</p>
<p>The value of <code>person</code> is an object. The argument <code>member</code> has a (copied) reference to the <em>same</em> object. When we modify a property of the object <code>member</code> has a reference to, the value of <code>person</code> will also be modified, since they both have a reference to the same object. <code>person</code>'s <code>name</code> property is now equal to the value <code>"Lydia"</code></p>
<p></p>
</details>
<hr>
<h6><a id="user-content-52-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#52-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>52. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">greeting</span>() {
  <span class="pl-k">throw</span> <span class="pl-s"><span class="pl-pds">"</span>Hello world!<span class="pl-pds">"</span></span>;
}

<span class="pl-k">function</span> <span class="pl-en">sayHi</span>() {
  <span class="pl-k">try</span> {
    <span class="pl-k">const</span> <span class="pl-c1">data</span> <span class="pl-k">=</span> <span class="pl-en">greeting</span>();
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>It worked!<span class="pl-pds">"</span></span>, data);
  } <span class="pl-k">catch</span> (e) {
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>Oh no an error:<span class="pl-pds">"</span></span>, e);
  }
}

<span class="pl-en">sayHi</span>();</pre></div>
<ul>
<li>A: <code>It worked! Hello world!</code></li>
<li>B: <code>Oh no an error: undefined</code></li>
<li>C: <code>SyntaxError: can only throw Error objects</code></li>
<li>D: <code>Oh no an error: Hello world!</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-5" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-5"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>With the <code>throw</code> statement, we can create custom errors. With this statement, you can throw exceptions. An exception can be a <b>string</b>, a <b>number</b>, a <b>boolean</b> or an <b>object</b>. In this case, our exception is the string <code>'Hello world'</code>.</p>
<p>With the <code>catch</code> statement, we can specify what to do if an exception is thrown in the <code>try</code> block. An exception is thrown: the string <code>'Hello world'</code>. <code>e</code> is now equal to that string, which we log. This results in <code>'Oh an error: Hello world'</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-53-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#53-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>53. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">Car</span>() {
  <span class="pl-c1">this</span>.<span class="pl-smi">make</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Lamborghini<span class="pl-pds">"</span></span>;
  <span class="pl-k">return</span> { make<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Maserati<span class="pl-pds">"</span></span> };
}

<span class="pl-k">const</span> <span class="pl-c1">myCar</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Car</span>();
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">myCar</span>.<span class="pl-smi">make</span>);</pre></div>
<ul>
<li>A: <code>"Lamborghini"</code></li>
<li>B: <code>"Maserati"</code></li>
<li>C: <code>ReferenceError</code></li>
<li>D: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-13" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-13"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>When you return a property, the value of the property is equal to the <em>returned</em> value, not the value set in the constructor function. We return the string <code>"Maserati"</code>, so <code>myCar.make</code> is equal to <code>"Maserati"</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-54-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#54-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>54. What's the output?</h6>
<div class="highlight highlight-source-js"><pre>(() <span class="pl-k">=&gt;</span> {
  <span class="pl-k">let</span> x <span class="pl-k">=</span> (y <span class="pl-k">=</span> <span class="pl-c1">10</span>);
})();

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-k">typeof</span> x);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-k">typeof</span> y);</pre></div>
<ul>
<li>A: <code>"undefined", "number"</code></li>
<li>B: <code>"number", "number"</code></li>
<li>C: <code>"object", "number"</code></li>
<li>D: <code>"number", "undefined"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-17" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-17"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p><code>let x = y = 10;</code> is actually shorthand for:</p>
<div class="highlight highlight-source-js"><pre>y <span class="pl-k">=</span> <span class="pl-c1">10</span>;
<span class="pl-k">let</span> x <span class="pl-k">=</span> y;</pre></div>
<p>When we set <code>y</code> equal to <code>10</code>, we actually add a property <code>y</code> to the global object (<code>window</code> in browser, <code>global</code> in Node). In a browser, <code>window.y</code> is now equal to <code>10</code>.</p>
<p>Then, we declare a variable <code>x</code> with the value of <code>y</code>, which is <code>10</code>. Variables declared with the <code>let</code> keyword are <em>block scoped</em>, they are only defined within the block they're declared in; the immediately-invoked function (IIFE) in this case. When we use the <code>typeof</code> operator, the operand <code>x</code> is not defined: we are trying to access <code>x</code> outside of the block it's declared in. This means that <code>x</code> is not defined. Values who haven't been assigned a value or declared are of type <code>"undefined"</code>. <code>console.log(typeof x)</code> returns <code>"undefined"</code>.</p>
<p>However, we created a global variable <code>y</code> when setting <code>y</code> equal to <code>10</code>. This value is accessible anywhere in our code. <code>y</code> is defined, and holds a value of type <code>"number"</code>. <code>console.log(typeof y)</code> returns <code>"number"</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-55-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#55-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>55. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">class</span> <span class="pl-en">Dog</span> {
  <span class="pl-en">constructor</span>(<span class="pl-smi">name</span>) {
    <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> name;
  }
}

<span class="pl-smi">Dog</span>.<span class="pl-c1">prototype</span>.<span class="pl-en">bark</span> <span class="pl-k">=</span> <span class="pl-k">function</span>() {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">`</span>Woof I am <span class="pl-s1"><span class="pl-pse">${</span><span class="pl-c1">this</span>.<span class="pl-c1">name</span><span class="pl-pse">}</span></span><span class="pl-pds">`</span></span>);
};

<span class="pl-k">const</span> <span class="pl-c1">pet</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Dog</span>(<span class="pl-s"><span class="pl-pds">"</span>Mara<span class="pl-pds">"</span></span>);

<span class="pl-smi">pet</span>.<span class="pl-en">bark</span>();

<span class="pl-k">delete</span> <span class="pl-smi">Dog</span>.<span class="pl-c1">prototype</span>.<span class="pl-smi">bark</span>;

<span class="pl-smi">pet</span>.<span class="pl-en">bark</span>();</pre></div>
<ul>
<li>A: <code>"Woof I am Mara"</code>, <code>TypeError</code></li>
<li>B: <code>"Woof I am Mara"</code>, <code>"Woof I am Mara"</code></li>
<li>C: <code>"Woof I am Mara"</code>, <code>undefined</code></li>
<li>D: <code>TypeError</code>, <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-18" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-18"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>We can delete properties from objects using the <code>delete</code> keyword, also on the prototype. By deleting a property on the prototype, it is not available anymore in the prototype chain. In this case, the <code>bark</code> function is not available anymore on the prototype after <code>delete Dog.prototype.bark</code>, yet we still try to access it.</p>
<p>When we try to invoke something that is not a function, a <code>TypeError</code> is thrown. In this case <code>TypeError: pet.bark is not a function</code>, since <code>pet.bark</code> is <code>undefined</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-56-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#56-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>56. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">set</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Set</span>([<span class="pl-c1">1</span>, <span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]);

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(set);</pre></div>
<ul>
<li>A: <code>[1, 1, 2, 3, 4]</code></li>
<li>B: <code>[1, 2, 3, 4]</code></li>
<li>C: <code>{1, 1, 2, 3, 4}</code></li>
<li>D: <code>{1, 2, 3, 4}</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-6" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-6"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>The <code>Set</code> object is a collection of <em>unique</em> values: a value can only occur once in a set.</p>
<p>We passed the iterable <code>[1, 1, 2, 3, 4]</code> with a duplicate value <code>1</code>. Since we cannot have two of the same values in a set, one of them is removed. This results in <code>{1, 2, 3, 4}</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-57-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#57-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>57. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> counter.js</span>
<span class="pl-k">let</span> counter <span class="pl-k">=</span> <span class="pl-c1">10</span>;
<span class="pl-k">export</span> <span class="pl-c1">default</span> <span class="pl-smi">counter</span>;</pre></div>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> index.js</span>
<span class="pl-k">import</span> <span class="pl-smi">myCounter</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">"</span>./counter<span class="pl-pds">"</span></span>;

myCounter <span class="pl-k">+=</span> <span class="pl-c1">1</span>;

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(myCounter);</pre></div>
<ul>
<li>A: <code>10</code></li>
<li>B: <code>11</code></li>
<li>C: <code>Error</code></li>
<li>D: <code>NaN</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-16" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-16"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>An imported module is <em>read-only</em>: you cannot modify the imported module. Only the module that exports them can change its value.</p>
<p>When we try to increment the value of <code>myCounter</code>, it throws an error: <code>myCounter</code> is read-only and cannot be modified.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-58-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#58-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>58. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>;
age <span class="pl-k">=</span> <span class="pl-c1">21</span>;

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-k">delete</span> name);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-k">delete</span> age);</pre></div>
<ul>
<li>A: <code>false</code>, <code>true</code></li>
<li>B: <code>"Lydia"</code>, <code>21</code></li>
<li>C: <code>true</code>, <code>true</code></li>
<li>D: <code>undefined</code>, <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-19" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-19"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>The <code>delete</code> operator returns a boolean value: <code>true</code> on a successful deletion, else it'll return <code>false</code>. However, variables declared with the <code>var</code>, <code>const</code> or <code>let</code> keyword cannot be deleted using the <code>delete</code> operator.</p>
<p>The <code>name</code> variable was declared with a <code>const</code> keyword, so its deletion is not successful: <code>false</code> is returned. When we set <code>age</code> equal to <code>21</code>, we actually added a property called <code>age</code> to the global object. You can successfully delete properties from objects this way, also the global object, so <code>delete age</code> returns <code>true</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-59-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#59-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>59. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">numbers</span> <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>];
<span class="pl-k">const</span> [<span class="pl-c1">y</span>] <span class="pl-k">=</span> numbers;

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(y);</pre></div>
<ul>
<li>A: <code>[[1, 2, 3, 4, 5]]</code></li>
<li>B: <code>[1, 2, 3, 4, 5]</code></li>
<li>C: <code>1</code></li>
<li>D: <code>[1]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-17" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-17"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>We can unpack values from arrays or properties from objects through destructuring. For example:</p>
<div class="highlight highlight-source-js"><pre>[a, b] <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>];</pre></div>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f41444670566f702e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f41444670566f702e706e67" width="200" data-canonical-src="https://i.imgur.com/ADFpVop.png" style="max-width:100%;"></a>
<p>The value of <code>a</code> is now <code>1</code>, and the value of <code>b</code> is now <code>2</code>. What we actually did in the question, is:</p>
<div class="highlight highlight-source-js"><pre>[y] <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>, <span class="pl-c1">5</span>];</pre></div>
<a target="_blank" rel="noopener noreferrer" href="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f4e7a476b4d4e6b2e706e67"><img src="./GitHub-JS-QA_files/68747470733a2f2f692e696d6775722e636f6d2f4e7a476b4d4e6b2e706e67" width="200" data-canonical-src="https://i.imgur.com/NzGkMNk.png" style="max-width:100%;"></a>
<p>This means that the value of <code>y</code> is equal to the first value in the array, which is the number <code>1</code>. When we log <code>y</code>, <code>1</code> is returned.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-60-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#60-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>60. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">user</span> <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>, age<span class="pl-k">:</span> <span class="pl-c1">21</span> };
<span class="pl-k">const</span> <span class="pl-c1">admin</span> <span class="pl-k">=</span> { admin<span class="pl-k">:</span> <span class="pl-c1">true</span>, <span class="pl-k">...</span>user };

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(admin);</pre></div>
<ul>
<li>A: <code>{ admin: true, user: { name: "Lydia", age: 21 } }</code></li>
<li>B: <code>{ admin: true, name: "Lydia", age: 21 }</code></li>
<li>C: <code>{ admin: true, user: ["Lydia", 21] }</code></li>
<li>D: <code>{ admin: true }</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-14" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-14"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>It's possible to combine objects using the spread operator <code>...</code>. It lets you create copies of the key/value pairs of one object, and add them to another object. In this case, we create copies of the <code>user</code> object, and add them to the <code>admin</code> object. The <code>admin</code> object now contains the copied key/value pairs, which results in <code>{ admin: true, name: "Lydia", age: 21 }</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-61-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#61-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>61. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">person</span> <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span> };

<span class="pl-c1">Object</span>.<span class="pl-en">defineProperty</span>(person, <span class="pl-s"><span class="pl-pds">"</span>age<span class="pl-pds">"</span></span>, { value<span class="pl-k">:</span> <span class="pl-c1">21</span> });

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(person);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-c1">Object</span>.<span class="pl-c1">keys</span>(person));</pre></div>
<ul>
<li>A: <code>{ name: "Lydia", age: 21 }</code>, <code>["name", "age"]</code></li>
<li>B: <code>{ name: "Lydia", age: 21 }</code>, <code>["name"]</code></li>
<li>C: <code>{ name: "Lydia"}</code>, <code>["name", "age"]</code></li>
<li>D: <code>{ name: "Lydia"}</code>, <code>["age"]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-15" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-15"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>With the <code>defineProperty</code> method, we can add new properties to an object, or modify existing ones. When we add a property to an object using the <code>defineProperty</code> method, they are by default <em>not enumerable</em>. The <code>Object.keys</code> method returns all <em>enumerable</em> property names from an object, in this case only <code>"name"</code>.</p>
<p>Properties added using the <code>defineProperty</code> method are immutable by default. You can override this behavior using the <code>writable</code>, <code>configurable</code> and <code>enumerable</code> properties. This way, the <code>defineProperty</code> method gives you a lot more control over the properties you're adding to an object.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-62-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#62-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>62. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">settings</span> <span class="pl-k">=</span> {
  username<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>lydiahallie<span class="pl-pds">"</span></span>,
  level<span class="pl-k">:</span> <span class="pl-c1">19</span>,
  health<span class="pl-k">:</span> <span class="pl-c1">90</span>
};

<span class="pl-k">const</span> <span class="pl-c1">data</span> <span class="pl-k">=</span> <span class="pl-c1">JSON</span>.<span class="pl-c1">stringify</span>(settings, [<span class="pl-s"><span class="pl-pds">"</span>level<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>health<span class="pl-pds">"</span></span>]);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(data);</pre></div>
<ul>
<li>A: <code>"{"level":19, "health":90}"</code></li>
<li>B: <code>"{"username": "lydiahallie"}"</code></li>
<li>C: <code>"["level", "health"]"</code></li>
<li>D: <code>"{"username": "lydiahallie", "level":19, "health":90}"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-20" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-20"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>The second argument of <code>JSON.stringify</code> is the <em>replacer</em>. The replacer can either be a function or an array, and lets you control what and how the values should be stringified.</p>
<p>If the replacer is an <em>array</em>, only the property names included in the array will be added to the JSON string. In this case, only the properties with the names <code>"level"</code> and <code>"health"</code> are included, <code>"username"</code> is excluded. <code>data</code> is now equal to <code>"{"level":19, "health":90}"</code>.</p>
<p>If the replacer is a <em>function</em>, this function gets called on every property in the object you're stringifying. The value returned from this function will be the value of the property when it's added to the JSON string. If the value is <code>undefined</code>, this property is excluded from the JSON string.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-63-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#63-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>63. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">let</span> num <span class="pl-k">=</span> <span class="pl-c1">10</span>;

<span class="pl-k">const</span> <span class="pl-c1">increaseNumber</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> num<span class="pl-k">++</span>;
<span class="pl-k">const</span> <span class="pl-c1">increasePassedNumber</span> <span class="pl-k">=</span> <span class="pl-smi">number</span> <span class="pl-k">=&gt;</span> number<span class="pl-k">++</span>;

<span class="pl-k">const</span> <span class="pl-c1">num1</span> <span class="pl-k">=</span> <span class="pl-en">increaseNumber</span>();
<span class="pl-k">const</span> <span class="pl-c1">num2</span> <span class="pl-k">=</span> <span class="pl-en">increasePassedNumber</span>(num1);

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(num1);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(num2);</pre></div>
<ul>
<li>A: <code>10</code>, <code>10</code></li>
<li>B: <code>10</code>, <code>11</code></li>
<li>C: <code>11</code>, <code>11</code></li>
<li>D: <code>11</code>, <code>12</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-21" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-21"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>The unary operator <code>++</code> <em>first returns</em> the value of the operand, <em>then increments</em> the value of the operand. The value of <code>num1</code> is <code>10</code>, since the <code>increaseNumber</code> function first returns the value of <code>num</code>, which is <code>10</code>, and only increments the value of <code>num</code> afterwards.</p>
<p><code>num2</code> is <code>10</code>, since we passed <code>num1</code> to the <code>increasePassedNumber</code>. <code>number</code> is equal to <code>10</code>(the value of <code>num1</code>. Again, the unary operator <code>++</code> <em>first returns</em> the value of the operand, <em>then increments</em> the value of the operand. The value of <code>number</code> is <code>10</code>, so <code>num2</code> is equal to <code>10</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-64-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#64-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>64. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">value</span> <span class="pl-k">=</span> { number<span class="pl-k">:</span> <span class="pl-c1">10</span> };

<span class="pl-k">const</span> <span class="pl-c1">multiply</span> <span class="pl-k">=</span> (<span class="pl-smi">x</span> <span class="pl-k">=</span> { <span class="pl-k">...</span>value }) <span class="pl-k">=&gt;</span> {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>((<span class="pl-smi">x</span>.<span class="pl-smi">number</span> <span class="pl-k">*=</span> <span class="pl-c1">2</span>));
};

<span class="pl-en">multiply</span>();
<span class="pl-en">multiply</span>();
<span class="pl-en">multiply</span>(value);
<span class="pl-en">multiply</span>(value);</pre></div>
<ul>
<li>A: <code>20</code>, <code>40</code>, <code>80</code>, <code>160</code></li>
<li>B: <code>20</code>, <code>40</code>, <code>20</code>, <code>40</code></li>
<li>C: <code>20</code>, <code>20</code>, <code>20</code>, <code>40</code></li>
<li>D: <code>NaN</code>, <code>NaN</code>, <code>20</code>, <code>40</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-18" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-18"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>In ES6, we can initialize parameters with a default value. The value of the parameter will be the default value, if no other value has been passed to the function, or if the value of the parameter is <code>"undefined"</code>. In this case, we spread the properties of the <code>value</code> object into a new object, so <code>x</code> has the default value of <code>{ number: 10 }</code>.</p>
<p>The default argument is evaluated at <em>call time</em>! Every time we call the function, a <em>new</em> object is created. We invoke the <code>multiply</code> function the first two times without passing a value: <code>x</code> has the default value of <code>{ number: 10 }</code>. We then log the multiplied value of that number, which is <code>20</code>.</p>
<p>The third time we invoke multiply, we do pass an argument: the object called <code>value</code>. The <code>*=</code> operator is actually shorthand for <code>x.number = x.number * 2</code>: we modify the value of <code>x.number</code>, and log the multiplied value <code>20</code>.</p>
<p>The fourth time, we pass the <code>value</code> object again. <code>x.number</code> was previously modified to <code>20</code>, so <code>x.number *= 2</code> logs <code>40</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-65-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#65-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>65. What's the output?</h6>
<div class="highlight highlight-source-js"><pre>[<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>].<span class="pl-en">reduce</span>((<span class="pl-smi">x</span>, <span class="pl-smi">y</span>) <span class="pl-k">=&gt;</span> <span class="pl-en">console</span>.<span class="pl-c1">log</span>(x, y));</pre></div>
<ul>
<li>A: <code>1</code> <code>2</code> and <code>3</code> <code>3</code> and <code>6</code> <code>4</code></li>
<li>B: <code>1</code> <code>2</code> and <code>2</code> <code>3</code> and <code>3</code> <code>4</code></li>
<li>C: <code>1</code> <code>undefined</code> and <code>2</code> <code>undefined</code> and <code>3</code> <code>undefined</code> and <code>4</code> <code>undefined</code></li>
<li>D: <code>1</code> <code>2</code> and <code>undefined</code> <code>3</code> and <code>undefined</code> <code>4</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-7" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-7"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>The first argument that the <code>reduce</code> method receives is the <em>accumulator</em>, <code>x</code> in this case. The second argument is the <em>current value</em>, <code>y</code>. With the reduce method, we execute a callback function on every element in the array, which could ultimately result in one single value.</p>
<p>In this example, we are not returning any values, we are simply logging the values of the accumulator and the current value.</p>
<p>The value of the accumulator is equal to the previously returned value of the callback function. If you don't pass the optional <code>initialValue</code> argument to the <code>reduce</code> method, the accumulator is equal to the first element on the first call.</p>
<p>On the first call, the accumulator (<code>x</code>) is <code>1</code>, and the current value (<code>y</code>) is <code>2</code>. We don't return from the callback function, we log the accumulator and current value: <code>1</code> and <code>2</code> get logged.</p>
<p>If you don't return a value from a function, it returns <code>undefined</code>. On the next call, the accumulator is <code>undefined</code>, and the current value is <code>3</code>. <code>undefined</code> and <code>3</code> get logged.</p>
<p>On the fourth call, we again don't return from the callback function. The accumulator is again <code>undefined</code>, and the current value is <code>4</code>. <code>undefined</code> and <code>4</code> get logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-66-with-which-constructor-can-we-successfully-extend-the-dog-class" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#66-with-which-constructor-can-we-successfully-extend-the-dog-class"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>66. With which constructor can we successfully extend the <code>Dog</code> class?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">class</span> <span class="pl-en">Dog</span> {
  <span class="pl-en">constructor</span>(<span class="pl-smi">name</span>) {
    <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> name;
  }
};

<span class="pl-k">class</span> <span class="pl-en">Labrador</span> <span class="pl-k">extends</span> <span class="pl-e">Dog</span> {
  <span class="pl-c"><span class="pl-c">//</span> 1 </span>
  <span class="pl-en">constructor</span>(<span class="pl-smi">name</span>, <span class="pl-smi">size</span>) {
    <span class="pl-c1">this</span>.<span class="pl-c1">size</span> <span class="pl-k">=</span> size;
  }
  <span class="pl-c"><span class="pl-c">//</span> 2</span>
  <span class="pl-en">constructor</span>(<span class="pl-smi">name</span>, <span class="pl-smi">size</span>) {
    <span class="pl-c1">super</span>(name);
    <span class="pl-c1">this</span>.<span class="pl-c1">size</span> <span class="pl-k">=</span> size;
  }
  <span class="pl-c"><span class="pl-c">//</span> 3</span>
  <span class="pl-en">constructor</span>(<span class="pl-smi">size</span>) {
    <span class="pl-c1">super</span>(name);
    <span class="pl-c1">this</span>.<span class="pl-c1">size</span> <span class="pl-k">=</span> size;
  }
  <span class="pl-c"><span class="pl-c">//</span> 4 </span>
  <span class="pl-en">constructor</span>(<span class="pl-smi">name</span>, <span class="pl-smi">size</span>) {
    <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> name;
    <span class="pl-c1">this</span>.<span class="pl-c1">size</span> <span class="pl-k">=</span> size;
  }

};</pre></div>
<ul>
<li>A: 1</li>
<li>B: 2</li>
<li>C: 3</li>
<li>D: 4</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-16" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-16"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>In a derived class, you cannot access the <code>this</code> keyword before calling <code>super</code>. If you try to do that, it will throw a ReferenceError: 1 and 4 would throw a reference error.</p>
<p>With the <code>super</code> keyword, we call that parent class's constructor with the given arguments. The parent's constructor receives the <code>name</code> argument, so we need to pass <code>name</code> to <code>super</code>.</p>
<p>The <code>Labrador</code> class receives two arguments, <code>name</code> since it extends <code>Dog</code>, and <code>size</code> as an extra property on the <code>Labrador</code> class. They both need to be passed to the constructor function on <code>Labrador</code>, which is done correctly  using constructor 2.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-67-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#67-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>67. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> index.js</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>running index.js<span class="pl-pds">'</span></span>);
<span class="pl-k">import</span> { <span class="pl-smi">sum</span> } <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">'</span>./sum.js<span class="pl-pds">'</span></span>;
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-en">sum</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>));

<span class="pl-c"><span class="pl-c">//</span> sum.js</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>running sum.js<span class="pl-pds">'</span></span>);
<span class="pl-k">export</span> <span class="pl-k">const</span> <span class="pl-c1">sum</span> <span class="pl-k">=</span> (<span class="pl-smi">a</span>, <span class="pl-smi">b</span>) <span class="pl-k">=&gt;</span> a <span class="pl-k">+</span> b;</pre></div>
<ul>
<li>A: <code>running index.js</code>, <code>running sum.js</code>, <code>3</code></li>
<li>B: <code>running sum.js</code>, <code>running index.js</code>, <code>3</code></li>
<li>C: <code>running sum.js</code>, <code>3</code>, <code>running index.js</code></li>
<li>D: <code>running index.js</code>, <code>undefined</code>, <code>running sum.js</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-17" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-17"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>With the <code>import</code> keyword, all imported modules are <em>pre-parsed</em>. This means that the imported modules get run <em>first</em>, the code in the file which imports the module gets executed <em>after</em>.</p>
<p>This is a difference between <code>require()</code> in CommonJS and <code>import</code>! With <code>require()</code>, you can load dependencies on demand while the code is being run. If we would have used <code>require</code> instead of <code>import</code>, <code>running index.js</code>, <code>running sum.js</code>, <code>3</code> would have been logged to the console.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-68-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#68-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>68. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-c1">Number</span>(<span class="pl-c1">2</span>) <span class="pl-k">===</span> <span class="pl-c1">Number</span>(<span class="pl-c1">2</span>))
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-c1">Boolean</span>(<span class="pl-c1">false</span>) <span class="pl-k">===</span> <span class="pl-c1">Boolean</span>(<span class="pl-c1">false</span>))
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">'</span>foo<span class="pl-pds">'</span></span>) <span class="pl-k">===</span> <span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">'</span>foo<span class="pl-pds">'</span></span>))</pre></div>
<ul>
<li>A: <code>true</code>, <code>true</code>, <code>false</code></li>
<li>B: <code>false</code>, <code>true</code>, <code>false</code></li>
<li>C: <code>true</code>, <code>false</code>, <code>true</code></li>
<li>D: <code>true</code>, <code>true</code>, <code>true</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-22" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-22"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>Every Symbol is entirely unique. The purpose of the argument passed to the Symbol is to give the Symbol a description. The value of the Symbol is not dependent on the passed argument. As we test equality, we are creating two entirely new symbols: the first <code>Symbol('foo')</code>, and the second <code>Symbol('foo')</code>. These two values are unique and not equal to each other, <code>Symbol('foo') === Symbol('foo')</code> returns <code>false</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-69-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#69-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>69. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia Hallie<span class="pl-pds">"</span></span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">name</span>.<span class="pl-en">padStart</span>(<span class="pl-c1">13</span>))
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">name</span>.<span class="pl-en">padStart</span>(<span class="pl-c1">2</span>))</pre></div>
<ul>
<li>A: <code>"Lydia Hallie"</code>, <code>"Lydia Hallie"</code></li>
<li>B: <code>"           Lydia Hallie"</code>, <code>"  Lydia Hallie"</code> (<code>"[13x whitespace]Lydia Hallie"</code>, <code>"[2x whitespace]Lydia Hallie"</code>)</li>
<li>C: <code>" Lydia Hallie"</code>, <code>"Lydia Hallie"</code> (<code>"[1x whitespace]Lydia Hallie"</code>, <code>"Lydia Hallie"</code>)</li>
<li>D: <code>"Lydia Hallie"</code>, <code>"Lyd"</code>,</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-19" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-19"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>With the <code>padStart</code> method, we can add padding to the beginning of a string. The value passed to this method is the <em>total</em> length of the string together with the padding. The string <code>"Lydia Hallie"</code> has a length of <code>12</code>. <code>name.padStart(13)</code> inserts 1 space at the start of the string, because 12 + 1 is 13.</p>
<p>If the argument passed to the <code>padStart</code> method is smaller than the length of the array, no padding will be added.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-70-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#70-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>70. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>🥑<span class="pl-pds">"</span></span> <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">"</span>💻<span class="pl-pds">"</span></span>);</pre></div>
<ul>
<li>A: <code>"🥑💻"</code></li>
<li>B: <code>257548</code></li>
<li>C: A string containing their code points</li>
<li>D: Error</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-23" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-23"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>With the <code>+</code> operator, you can concatenate strings. In this case, we are concatenating the string <code>"🥑"</code> with the string <code>"💻"</code>, resulting in <code>"🥑💻"</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-71-how-can-we-log-the-values-that-are-commented-out-after-the-consolelog-statement" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#71-how-can-we-log-the-values-that-are-commented-out-after-the-consolelog-statement"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>71. How can we log the values that are commented out after the console.log statement?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span><span class="pl-k">*</span> <span class="pl-en">startGame</span>() {
  <span class="pl-k">const</span> <span class="pl-c1">answer</span> <span class="pl-k">=</span> <span class="pl-k">yield</span> <span class="pl-s"><span class="pl-pds">"</span>Do you love JavaScript?<span class="pl-pds">"</span></span>;
  <span class="pl-k">if</span> (answer <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">"</span>Yes<span class="pl-pds">"</span></span>) {
    <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>Oh wow... Guess we're gone here<span class="pl-pds">"</span></span>;
  }
  <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>JavaScript loves you back ❤️<span class="pl-pds">"</span></span>;
}

<span class="pl-k">const</span> <span class="pl-c1">game</span> <span class="pl-k">=</span> <span class="pl-en">startGame</span>();
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-c"><span class="pl-c">/*</span> 1 <span class="pl-c">*/</span></span>); <span class="pl-c"><span class="pl-c">//</span> Do you love JavaScript?</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-c"><span class="pl-c">/*</span> 2 <span class="pl-c">*/</span></span>); <span class="pl-c"><span class="pl-c">//</span> JavaScript loves you back ❤️</span></pre></div>
<ul>
<li>A: <code>game.next("Yes").value</code> and <code>game.next().value</code></li>
<li>B: <code>game.next.value("Yes")</code> and <code>game.next.value()</code></li>
<li>C: <code>game.next().value</code> and <code>game.next("Yes").value</code></li>
<li>D: <code>game.next.value()</code> and <code>game.next.value("Yes")</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-20" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-20"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>A generator function "pauses" its execution when it sees the <code>yield</code> keyword. First, we have to let the function yield the string "Do you love JavaScript?", which can be done by calling <code>game.next().value</code>.</p>
<p>Every line is executed, until it finds the first <code>yield</code> keyword. There is a <code>yield</code> keyword on the first line within the function: the execution stops with the first yield! <em>This means that the variable <code>answer</code> is not defined yet!</em></p>
<p>When we call <code>game.next("Yes").value</code>, the previous <code>yield</code> is replaced with the value of the parameters passed to the <code>next()</code> function, <code>"Yes"</code> in this case. The value of the variable <code>answer</code> is now equal to <code>"Yes"</code>. The condition of the if-statement returns <code>false</code>, and <code>JavaScript loves you back ❤️</code> gets logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-72-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#72-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>72. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-c1">String</span>.<span class="pl-smi">raw</span><span class="pl-s"><span class="pl-pds">`</span>Hello<span class="pl-cce">\n</span>world<span class="pl-pds">`</span></span>);</pre></div>
<ul>
<li>A: <code>Hello world!</code></li>
<li>B: <code>Hello</code> <br>&nbsp; &nbsp; &nbsp;<code>world</code></li>
<li>C: <code>Hello\nworld</code></li>
<li>D: <code>Hello\n</code> <br> &nbsp; &nbsp; &nbsp;<code>world</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-21" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-21"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p><code>String.raw</code> returns a string where the escapes (<code>\n</code>, <code>\v</code>, <code>\t</code> etc.) are ignored! Backslashes can be an issue since you could end up with something like:</p>
<p><code>const path = `C:\Documents\Projects\table.html`</code></p>
<p>Which would result in:</p>
<p><code>"C:DocumentsProjects able.html"</code></p>
<p>With <code>String.raw</code>, it would simply ignore the escape and print:</p>
<p><code>C:\Documents\Projects\table.html</code></p>
<p>In this case, the string is <code>Hello\nworld</code>, which gets logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-73-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#73-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>73. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">async</span> <span class="pl-k">function</span> <span class="pl-en">getData</span>() {
  <span class="pl-k">return</span> <span class="pl-k">await</span> <span class="pl-c1">Promise</span>.<span class="pl-c1">resolve</span>(<span class="pl-s"><span class="pl-pds">"</span>I made it!<span class="pl-pds">"</span></span>);
}

<span class="pl-k">const</span> <span class="pl-c1">data</span> <span class="pl-k">=</span> <span class="pl-en">getData</span>();
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(data);</pre></div>
<ul>
<li>A: <code>"I made it!"</code></li>
<li>B: <code>Promise {&lt;resolved&gt;: "I made it!"}</code></li>
<li>C: <code>Promise {&lt;pending&gt;}</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-22" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-22"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>An async function always returns a promise. The <code>await</code> still has to wait for the promise to resolve: a pending promise gets returned when we call <code>getData()</code> in order to set <code>data</code> equal to it.</p>
<p>If we wanted to get access to the resolved value <code>"I made it"</code>, we could have used the <code>.then()</code> method on <code>data</code>:</p>
<p><code>data.then(res =&gt; console.log(res))</code></p>
<p>This would've logged <code>"I made it!"</code></p>
<p></p>
</details>
<hr>
<h6><a id="user-content-74-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#74-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>74. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">addToList</span>(<span class="pl-smi">item</span>, <span class="pl-smi">list</span>) {
  <span class="pl-k">return</span> <span class="pl-smi">list</span>.<span class="pl-c1">push</span>(item);
}

<span class="pl-k">const</span> <span class="pl-c1">result</span> <span class="pl-k">=</span> <span class="pl-en">addToList</span>(<span class="pl-s"><span class="pl-pds">"</span>apple<span class="pl-pds">"</span></span>, [<span class="pl-s"><span class="pl-pds">"</span>banana<span class="pl-pds">"</span></span>]);
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(result);</pre></div>
<ul>
<li>A: <code>['apple', 'banana']</code></li>
<li>B: <code>2</code></li>
<li>C: <code>true</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-18" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-18"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>The <code>.push()</code> method returns the <em>length</em> of the new array! Previously, the array contained one element (the string <code>"banana"</code>) and had a length of <code>1</code>. After adding the string <code>"apple"</code> to the array, the array contains two elements, and has a length of <code>2</code>. This gets returned from the <code>addToList</code> function.</p>
<p>The <code>push</code> method modifies the original array. If you wanted to return the <em>array</em> from the function rather than the <em>length of the array</em>, you should have returned <code>list</code> after pushing <code>item</code> to it.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-75-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#75-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>75. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">box</span> <span class="pl-k">=</span> { x<span class="pl-k">:</span> <span class="pl-c1">10</span>, y<span class="pl-k">:</span> <span class="pl-c1">20</span> };

<span class="pl-c1">Object</span>.<span class="pl-en">freeze</span>(box);

<span class="pl-k">const</span> <span class="pl-c1">shape</span> <span class="pl-k">=</span> box;
<span class="pl-smi">shape</span>.<span class="pl-c1">x</span> <span class="pl-k">=</span> <span class="pl-c1">100</span>;

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(shape);</pre></div>
<ul>
<li>A: <code>{ x: 100, y: 20 }</code></li>
<li>B: <code>{ x: 10, y: 20 }</code></li>
<li>C: <code>{ x: 100 }</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-19" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-19"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p><code>Object.freeze</code> makes it impossible to add, remove, or modify properties of an object (unless the property's value is another object).</p>
<p>When we create the variable <code>shape</code> and set it equal to the frozen object <code>box</code>, <code>shape</code> also refers to a frozen object. You can check whether an object is frozen by using <code>Object.isFrozen</code>. In this case, <code>Object.isFrozen(shape)</code> returns true, since the variable <code>shape</code> has a reference to a frozen object.</p>
<p>Since <code>shape</code> is frozen, and since the value of <code>x</code> is not an object, we cannot modify the property <code>x</code>. <code>x</code> is still equal to <code>10</code>, and <code>{ x: 10, y: 20 }</code> gets logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-76-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#76-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>76. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> { name<span class="pl-k">:</span> <span class="pl-c1">myName</span> } <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span> };

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(name);</pre></div>
<ul>
<li>A: <code>"Lydia"</code></li>
<li>B: <code>"myName"</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-8" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-8"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>When we unpack the property <code>name</code> from the object on the right-hand side, we assign its value <code>"Lydia"</code> to a variable with the name <code>myName</code>.</p>
<p>With <code>{ name: myName }</code>, we tell JavaScript that we want to create a new variable called <code>myName</code> with the value of the <code>name</code> property on the right-hand side.</p>
<p>Since we try to log <code>name</code>, a variable that is not defined, a ReferenceError gets thrown.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-77-is-this-a-pure-function" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#77-is-this-a-pure-function"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>77. Is this a pure function?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">sum</span>(<span class="pl-smi">a</span>, <span class="pl-smi">b</span>) {
  <span class="pl-k">return</span> a <span class="pl-k">+</span> b;
}</pre></div>
<ul>
<li>A: Yes</li>
<li>B: No</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-24" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-24"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>A pure function is a function that <em>always</em> returns the same result, if the same arguments are passed.</p>
<p>The <code>sum</code> function always returns the same result. If we pass <code>1</code> and <code>2</code>, it will <em>always</em> return <code>3</code> without side effects. If we pass <code>5</code> and <code>10</code>, it will <em>always</em> return <code>15</code>, and so on. This is the definition of a pure function.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-78-what-is-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#78-what-is-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>78. What is the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">add</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> {
  <span class="pl-k">const</span> <span class="pl-c1">cache</span> <span class="pl-k">=</span> {};
  <span class="pl-k">return</span> <span class="pl-smi">num</span> <span class="pl-k">=&gt;</span> {
    <span class="pl-k">if</span> (num <span class="pl-k">in</span> cache) {
      <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">`</span>From cache! <span class="pl-s1"><span class="pl-pse">${</span>cache[num]<span class="pl-pse">}</span></span><span class="pl-pds">`</span></span>;
    } <span class="pl-k">else</span> {
      <span class="pl-k">const</span> <span class="pl-c1">result</span> <span class="pl-k">=</span> num <span class="pl-k">+</span> <span class="pl-c1">10</span>;
      cache[num] <span class="pl-k">=</span> result;
      <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">`</span>Calculated! <span class="pl-s1"><span class="pl-pse">${</span>result<span class="pl-pse">}</span></span><span class="pl-pds">`</span></span>;
    }
  };
};

<span class="pl-k">const</span> <span class="pl-c1">addFunction</span> <span class="pl-k">=</span> <span class="pl-en">add</span>();
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-en">addFunction</span>(<span class="pl-c1">10</span>));
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-en">addFunction</span>(<span class="pl-c1">10</span>));
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-en">addFunction</span>(<span class="pl-c1">5</span> <span class="pl-k">*</span> <span class="pl-c1">2</span>));</pre></div>
<ul>
<li>A: <code>Calculated! 20</code> <code>Calculated! 20</code> <code>Calculated! 20</code></li>
<li>B: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Calculated! 20</code></li>
<li>C: <code>Calculated! 20</code> <code>From cache! 20</code> <code>From cache! 20</code></li>
<li>D: <code>Calculated! 20</code> <code>From cache! 20</code> <code>Error</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-23" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-23"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>The <code>add</code> function is a <em>memoized</em> function. With memoization, we can cache the results of a function in order to speed up its execution. In this case, we create a <code>cache</code> object that stores the previously returned values.</p>
<p>If we call the <code>addFunction</code> function again with the same argument, it first checks whether it has already gotten that value in its cache. If that's the case, the caches value will be returned, which saves on execution time. Else, if it's not cached, it will calculate the value and store it afterwards.</p>
<p>We call the <code>addFunction</code> function three times with the same value: on the first invocation, the value of the function when <code>num</code> is equal to <code>10</code> isn't cached yet. The condition of the if-statement <code>num in cache</code> returns <code>false</code>, and the else block gets executed: <code>Calculated! 20</code> gets logged, and the value of the result gets added to the cache object. <code>cache</code> now looks like <code>{ 10: 20 }</code>.</p>
<p>The second time, the <code>cache</code> object contains the value that gets returned for <code>10</code>. The condition of the if-statement <code>num in cache</code> returns <code>true</code>, and <code>'From cache! 20'</code> gets logged.</p>
<p>The third time, we pass <code>5 * 2</code> to the function which gets evaluated to <code>10</code>. The <code>cache</code> object contains the value that gets returned for <code>10</code>. The condition of the if-statement <code>num in cache</code> returns <code>true</code>, and <code>'From cache! 20'</code> gets logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-79-what-is-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#79-what-is-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>79. What is the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">myLifeSummedUp</span> <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>☕<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>💻<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>🍷<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>🍫<span class="pl-pds">"</span></span>]

<span class="pl-k">for</span> (<span class="pl-k">let</span> item <span class="pl-k">in</span> myLifeSummedUp) {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(item)
}

<span class="pl-k">for</span> (<span class="pl-k">let</span> item <span class="pl-k">of</span> myLifeSummedUp) {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(item)
}</pre></div>
<ul>
<li>A: <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>"☕"</code> <code> "💻"</code> <code>"🍷"</code> <code>"🍫"</code></li>
<li>B: <code>"☕"</code> <code> "💻"</code> <code>"🍷"</code> <code>"🍫"</code> and <code>"☕"</code> <code> "💻"</code> <code>"🍷"</code> <code>"🍫"</code></li>
<li>C: <code>"☕"</code> <code> "💻"</code> <code>"🍷"</code> <code>"🍫"</code> and <code>0</code> <code>1</code> <code>2</code> <code>3</code></li>
<li>D:  <code>0</code> <code>1</code> <code>2</code> <code>3</code> and <code>{0: "☕", 1: "💻", 2: "🍷", 3: "🍫"}</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-25" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-25"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>With a <em>for-in</em> loop, we can iterate over <strong>enumerable</strong> properties. In an array, the enumerable properties are the "keys" of array elements, which are actually their indexes. You could see an array as:</p>
<p><code>{0: "☕", 1: "💻", 2: "🍷", 3: "🍫"}</code></p>
<p>Where the keys are the enumerable properties. <code>0</code> <code>1</code> <code>2</code> <code>3</code> get logged.</p>
<p>With a <em>for-of</em> loop, we can iterate over <strong>iterables</strong>. An array is an iterable. When we iterate over the array, the variable "item" is equal to the element it's currently iterating over, <code>"☕"</code> <code> "💻"</code> <code>"🍷"</code> <code>"🍫"</code> get logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-80-what-is-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#80-what-is-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>80. What is the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">list</span> <span class="pl-k">=</span> [<span class="pl-c1">1</span> <span class="pl-k">+</span> <span class="pl-c1">2</span>, <span class="pl-c1">1</span> <span class="pl-k">*</span> <span class="pl-c1">2</span>, <span class="pl-c1">1</span> <span class="pl-k">/</span> <span class="pl-c1">2</span>]
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(list)</pre></div>
<ul>
<li>A: <code>["1 + 2", "1 * 2", "1 / 2"]</code></li>
<li>B: <code>["12", 2, 0.5]</code></li>
<li>C: <code>[3, 2, 0.5]</code></li>
<li>D:  <code>[1, 1, 1]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-24" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-24"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>Array elements can hold any value. Numbers, strings, objects, other arrays, null, boolean values, undefined, and other expressions such as dates, functions, and calculations.</p>
<p>The element will be equal to the returned value.  <code>1 + 2</code> returns <code>3</code>, <code>1 * 2</code> returns <code>2</code>, and <code>1 / 2</code> returns <code>0.5</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-81-what-is-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#81-what-is-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>81. What is the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">sayHi</span>(<span class="pl-smi">name</span>) {
  <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">`</span>Hi there, <span class="pl-s1"><span class="pl-pse">${</span>name<span class="pl-pse">}</span></span><span class="pl-pds">`</span></span>
}

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-en">sayHi</span>())</pre></div>
<ul>
<li>A: <code>Hi there, </code></li>
<li>B: <code>Hi there, undefined</code></li>
<li>C: <code>Hi there, null</code></li>
<li>D:  <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-20" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-20"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>By default, arguments have the value of <code>undefined</code>, unless a value has been passed to the function. In this case, we didn't pass a value for the <code>name</code> argument. <code>name</code> is equal to <code>undefined</code> which gets logged.</p>
<p>In ES6, we can overwrite this default <code>undefined</code> value with default parameters. For example:</p>
<p><code>function sayHi(name = "Lydia") { ... }</code></p>
<p>In this case, if we didn't pass a value or if we passed <code>undefined</code>, <code>name</code> would always be equal to the string <code>Lydia</code></p>
<p></p>
</details>
<hr>
<h6><a id="user-content-82-what-is-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#82-what-is-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>82. What is the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">var</span> status <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>😎<span class="pl-pds">"</span></span>

<span class="pl-c1">setTimeout</span>(() <span class="pl-k">=&gt;</span> {
  <span class="pl-k">const</span> <span class="pl-c1">status</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>😍<span class="pl-pds">"</span></span>

  <span class="pl-k">const</span> <span class="pl-c1">data</span> <span class="pl-k">=</span> {
    status<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>🥑<span class="pl-pds">"</span></span>,
    <span class="pl-en">getStatus</span>() {
      <span class="pl-k">return</span> <span class="pl-c1">this</span>.<span class="pl-c1">status</span>
    }
  }

  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">data</span>.<span class="pl-en">getStatus</span>())
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">data</span>.<span class="pl-smi">getStatus</span>.<span class="pl-c1">call</span>(<span class="pl-c1">this</span>))
}, <span class="pl-c1">0</span>)</pre></div>
<ul>
<li>A: <code>"🥑"</code> and <code>"😍"</code></li>
<li>B: <code>"🥑"</code> and <code>"😎"</code></li>
<li>C: <code>"😍"</code> and <code>"😎"</code></li>
<li>D: <code>"😎"</code> and <code>"😎"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-21" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-21"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>The value of the <code>this</code> keyword is dependent on where you use it. In a <strong>method</strong>, like the <code>getStatus</code> method, the <code>this</code> keyword refers to <em>the object that the method belongs to</em>. The method belongs to the <code>data</code> object, so <code>this</code> refers to the <code>data</code> object. When we log <code>this.status</code>, the <code>status</code> property on the <code>data</code> object gets logged, which is <code>"🥑"</code>.</p>
<p>With the <code>call</code> method, we can change the object to which the <code>this</code> keyword refers. In <strong>functions</strong>, the <code>this</code> keyword refers to the <em>the object that the function belongs to</em>. We declared the <code>setTimeout</code> function on the <em>global object</em>, so within the <code>setTimeout</code> function, the <code>this</code> keyword refers to the <em>global object</em>. On the global object, there is a variable called <em>status</em> with the value of <code>"😎"</code>. When logging <code>this.status</code>, <code>"😎"</code> gets logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-83-what-is-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#83-what-is-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>83. What is the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">person</span> <span class="pl-k">=</span> {
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>,
  age<span class="pl-k">:</span> <span class="pl-c1">21</span>
}

<span class="pl-k">let</span> city <span class="pl-k">=</span> <span class="pl-smi">person</span>.<span class="pl-smi">city</span>
city <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Amsterdam<span class="pl-pds">"</span></span>

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(person)</pre></div>
<ul>
<li>A: <code>{ name: "Lydia", age: 21 }</code></li>
<li>B: <code>{ name: "Lydia", age: 21, city: "Amsterdam" }</code></li>
<li>C: <code>{ name: "Lydia", age: 21, city: undefined }</code></li>
<li>D: <code>"Amsterdam"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-26" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-26"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>We set the variable <code>city</code> equal to the value of the property called <code>city</code> on the <code>person</code> object. There is no property on this object called <code>city</code>, so the variable <code>city</code> has the value of <code>undefined</code>.</p>
<p>Note that we are <em>not</em> referencing the <code>person</code> object itself! We simply set the variable <code>city</code> equal to the current value of the <code>city</code> property on the <code>person</code> object.</p>
<p>Then, we set <code>city</code> equal to the string <code>"Amsterdam"</code>. This doesn't change the person object: there is no reference to that object.</p>
<p>When logging the <code>person</code> object, the unmodified object gets returned.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-84-what-is-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#84-what-is-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>84. What is the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">checkAge</span>(<span class="pl-smi">age</span>) {
  <span class="pl-k">if</span> (age <span class="pl-k">&lt;</span> <span class="pl-c1">18</span>) {
    <span class="pl-k">const</span> <span class="pl-c1">message</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Sorry, you're too young.<span class="pl-pds">"</span></span>
  } <span class="pl-k">else</span> {
    <span class="pl-k">const</span> <span class="pl-c1">message</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Yay! You're old enough!<span class="pl-pds">"</span></span>
  }

  <span class="pl-k">return</span> message
}

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-en">checkAge</span>(<span class="pl-c1">21</span>))</pre></div>
<ul>
<li>A: <code>"Sorry, you're too young."</code></li>
<li>B: <code>"Yay! You're old enough!"</code></li>
<li>C: <code>ReferenceError</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-25" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-25"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>Variables with the <code>const</code> and <code>let</code> keyword are <em>block-scoped</em>. A block is anything between curly brackets (<code>{ }</code>). In this case, the curly brackets of the if/else statements. You cannot reference a variable outside of the block it's declared in, a ReferenceError gets thrown.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-85-what-kind-of-information-would-get-logged" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#85-what-kind-of-information-would-get-logged"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>85. What kind of information would get logged?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-en">fetch</span>(<span class="pl-s"><span class="pl-pds">'</span>https://www.website.com/api/user/1<span class="pl-pds">'</span></span>)
  .<span class="pl-c1">then</span>(<span class="pl-smi">res</span> <span class="pl-k">=&gt;</span> <span class="pl-smi">res</span>.<span class="pl-en">json</span>())
  .<span class="pl-c1">then</span>(<span class="pl-smi">res</span> <span class="pl-k">=&gt;</span> <span class="pl-en">console</span>.<span class="pl-c1">log</span>(res))</pre></div>
<ul>
<li>A: The result of the <code>fetch</code> method.</li>
<li>B: The result of the second invocation of the <code>fetch</code> method.</li>
<li>C: The result of the callback in the previous <code>.then()</code>.</li>
<li>D: It would always be undefined.</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-26" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-26"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>The value of <code>res</code> in the second <code>.then</code> is equal to the returned value of the previous <code>.then</code>. You can keep chaining <code>.then</code>s like this, where the value is passed to the next handler.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-86-which-option-is-a-way-to-set-hasname-equal-to-true-provided-you-cannot-pass-true-as-an-argument" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#86-which-option-is-a-way-to-set-hasname-equal-to-true-provided-you-cannot-pass-true-as-an-argument"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>86. Which option is a way to set <code>hasName</code> equal to <code>true</code>, provided you cannot pass <code>true</code> as an argument?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">getName</span>(<span class="pl-smi">name</span>) {
  <span class="pl-k">const</span> <span class="pl-c1">hasName</span> <span class="pl-k">=</span> <span class="pl-c"><span class="pl-c">//</span></span>
}</pre></div>
<ul>
<li>A: <code>!!name</code></li>
<li>B: <code>name</code></li>
<li>C: <code>new Boolean(name)</code></li>
<li>D: <code>name.length</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-27" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-27"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>With <code>!!name</code>, we determine whether the value of <code>name</code> is truthy or falsy. If name is truthy, which we want to test for, <code>!name</code> returns <code>false</code>. <code>!false</code> (which is what <code>!!name</code> practically is) returns <code>true</code>.</p>
<p>By setting <code>hasName</code> equal to <code>name</code>, you set <code>hasName</code> equal to whatever value you passed to the <code>getName</code> function, not the boolean value <code>true</code>.</p>
<p><code>new Boolean(true)</code> returns an object wrapper, not the boolean value itself.</p>
<p><code>name.length</code> returns the length of the passed argument, not whether it's <code>true</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-87-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#87-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>87. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>I want pizza<span class="pl-pds">"</span></span>[<span class="pl-c1">0</span>])</pre></div>
<ul>
<li>A: <code>"""</code></li>
<li>B: <code>"I"</code></li>
<li>C: <code>SyntaxError</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-22" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-22"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>In order to get an character on a specific index in a string, you can use bracket notation. The first character in the string has index 0, and so on. In this case we want to get the element which index is 0, the character <code>"I'</code>, which gets logged.</p>
<p>Note that this method is not supported in IE7 and below. In that case, use <code>.charAt()</code></p>
<p></p>
</details>
<hr>
<h6><a id="user-content-88-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#88-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>88. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">sum</span>(<span class="pl-smi">num1</span>, <span class="pl-smi">num2</span> <span class="pl-k">=</span> <span class="pl-smi">num1</span>) {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(num1 <span class="pl-k">+</span> num2)
}

<span class="pl-en">sum</span>(<span class="pl-c1">10</span>)</pre></div>
<ul>
<li>A: <code>NaN</code></li>
<li>B: <code>20</code></li>
<li>C: <code>ReferenceError</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-23" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-23"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>You can set a default parameter's value equal to another parameter of the function, as long as they've been defined <em>before</em> the default parameter. We pass the value <code>10</code> to the <code>sum</code> function. If the <code>sum</code> function only receives 1 argument, it means that the value for <code>num2</code> is not passed, and the value of <code>num1</code> is equal to the passed value <code>10</code> in this case. The default value of <code>num2</code> is the value of <code>num1</code>, which is <code>10</code>.  <code>num1 + num2</code> returns <code>20</code>.</p>
<p>If you're trying to set a default parameter's value equal to a parameter which is defined <em>after</em> (to the right), the parameter's value hasn't been initialized yet, which will throw an error.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-89-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#89-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>89. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> module.js </span>
<span class="pl-k">export</span> <span class="pl-c1">default</span> () <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Hello world<span class="pl-pds">"</span></span>
<span class="pl-k">export</span> <span class="pl-k">const</span> <span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>

<span class="pl-c"><span class="pl-c">//</span> index.js </span>
<span class="pl-k">import</span> <span class="pl-c1">*</span> <span class="pl-k">as</span> <span class="pl-smi">data</span> <span class="pl-k">from</span> <span class="pl-s"><span class="pl-pds">"</span>./module<span class="pl-pds">"</span></span>

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(data)</pre></div>
<ul>
<li>A: <code>{ default: function default(), name: "Lydia" }</code></li>
<li>B: <code>{ default: function default() }</code></li>
<li>C: <code>{ default: "Hello world", name: "Lydia" }</code></li>
<li>D: Global object of <code>module.js</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-28" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-28"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>With the <code>import * as name</code> syntax, we import <em>all exports</em> from the <code>module.js</code> file into the <code>index.js</code> file as a new object called <code>data</code> is created. In the <code>module.js</code> file, there are two exports: the default export, and a named export. The default export is a function which returns the string <code>"Hello World"</code>, and the named export is a variable called <code>name</code> which has the value of the string <code>"Lydia"</code>.</p>
<p>The <code>data</code> object has a <code>default</code> property for the default export, other properties have the names of the named exports and their corresponding values.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-90-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#90-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>90. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">class</span> <span class="pl-en">Person</span> {
  <span class="pl-en">constructor</span>(<span class="pl-smi">name</span>) {
    <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> name
  }
}

<span class="pl-k">const</span> <span class="pl-c1">member</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Person</span>(<span class="pl-s"><span class="pl-pds">"</span>John<span class="pl-pds">"</span></span>)
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-k">typeof</span> member)</pre></div>
<ul>
<li>A: <code>"class"</code></li>
<li>B: <code>"function"</code></li>
<li>C: <code>"object"</code></li>
<li>D: <code>"string"</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-27" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-27"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>Classes are syntactical sugar for function constructors. The equivalent of the <code>Person</code> class as a function constructor would be:</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">Person</span>() {
  <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> name
}</pre></div>
<p>Calling a function constructor with <code>new</code> results in the creation of an instance of <code>Person</code>, <code>typeof</code> keyword returns <code>"object"</code> for an instance. <code>typeof member</code> returns <code>"object"</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-91-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#91-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>91. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">let</span> newList <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>].<span class="pl-c1">push</span>(<span class="pl-c1">4</span>)

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">newList</span>.<span class="pl-c1">push</span>(<span class="pl-c1">5</span>))</pre></div>
<ul>
<li>A: <code>[1, 2, 3, 4, 5]</code></li>
<li>B: <code>[1, 2, 3, 5]</code></li>
<li>C: <code>[1, 2, 3, 4]</code></li>
<li>D: <code>Error</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-9" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-9"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>The <code>.push</code> method returns the <em>new length</em> of the array, not the array itself! By setting <code>newList</code> equal to <code>[1, 2, 3].push(4)</code>, we set <code>newList</code> equal to the new length of the array: <code>4</code>.</p>
<p>Then, we try to use the <code>.push</code> method on <code>newList</code>. Since <code>newList</code> is the numerical value <code>4</code>, we cannot use the <code>.push</code> method: a TypeError is thrown.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-92-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#92-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>92. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">giveLydiaPizza</span>() {
  <span class="pl-k">return</span> <span class="pl-s"><span class="pl-pds">"</span>Here is pizza!<span class="pl-pds">"</span></span>
}

<span class="pl-k">const</span> <span class="pl-c1">giveLydiaChocolate</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">"</span>Here's chocolate... now go hit the gym already.<span class="pl-pds">"</span></span>

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">giveLydiaPizza</span>.<span class="pl-c1">prototype</span>)
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">giveLydiaChocolate</span>.<span class="pl-c1">prototype</span>)</pre></div>
<ul>
<li>A: <code>{ constructor: ...}</code> <code>{ constructor: ...}</code></li>
<li>B: <code>{}</code> <code>{ constructor: ...}</code></li>
<li>C: <code>{ constructor: ...}</code> <code>{}</code></li>
<li>D: <code>{ constructor: ...}</code> <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-10" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-10"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>Regular functions, such as the <code>giveLydiaPizza</code> function, have a <code>prototype</code> property, which is an object (prototype object) with a <code>constructor</code> property. Arrow functions however, such as the <code>giveLydiaChocolate</code> function, do not have this <code>prototype</code> property. <code>undefined</code> gets returned when trying to access the <code>prototype</code> property using <code>giveLydiaChocolate.prototype</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-93-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#93-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>93. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">person</span> <span class="pl-k">=</span> {
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>,
  age<span class="pl-k">:</span> <span class="pl-c1">21</span>
}

<span class="pl-k">for</span> (<span class="pl-k">const</span> [<span class="pl-c1">x</span>, <span class="pl-c1">y</span>] <span class="pl-k">of</span> <span class="pl-c1">Object</span>.<span class="pl-c1">entries</span>(person)) {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(x, y)
}</pre></div>
<ul>
<li>A: <code>name</code> <code>Lydia</code> and <code>age</code> <code>21</code></li>
<li>B: <code>["name", "Lydia"]</code> and <code>["age", 21]</code></li>
<li>C: <code>["name", "age"]</code> and <code>undefined</code></li>
<li>D: <code>Error</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-29" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-29"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p><code>Object.entries(person)</code> returns an array of nested arrays, containing the keys and objects:</p>
<p><code>[ [ 'name', 'Lydia' ], [ 'age', 21 ] ]</code></p>
<p>Using the <code>for-of</code> loop, we can iterate over each element in the array, the subarrays in this case. We can destructure the subarrays instantly in the for-of loop, using <code>const [x, y]</code>. <code>x</code> is equal to the first element in the subarray, <code>y</code> is equal to the second element in the subarray.</p>
<p>The first subarray is <code>[ "name", "Lydia" ]</code>, with <code>x</code> equal to <code>"name"</code>, and <code>y</code> equal to <code>"Lydia"</code>, which get logged.
The second subarray is <code>[ "age", 21 ]</code>, with <code>x</code> equal to <code>"age"</code>, and <code>y</code> equal to <code>21</code>, which get logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-94-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#94-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>94. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">getItems</span>(<span class="pl-smi">fruitList</span>, <span class="pl-k">...</span><span class="pl-v">args</span>, <span class="pl-smi">favoriteFruit</span>) {
  <span class="pl-k">return</span> [<span class="pl-k">...</span>fruitList, <span class="pl-k">...</span>args, favoriteFruit]
}

<span class="pl-en">getItems</span>([<span class="pl-s"><span class="pl-pds">"</span>banana<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>apple<span class="pl-pds">"</span></span>], <span class="pl-s"><span class="pl-pds">"</span>pear<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>orange<span class="pl-pds">"</span></span>)</pre></div>
<ul>
<li>A: <code>["banana", "apple", "pear", "orange"]</code></li>
<li>B: <code>[["banana", "apple"], "pear", "orange"]</code></li>
<li>C: <code>["banana", "apple", ["pear"], "orange"]</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-11" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-11"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p><code>...args</code> is a rest parameter. The rest parameter's value is an array containing all remaining arguments, <strong>and can only be the last parameter</strong>! In this example, the rest parameter was the second parameter. This is not possible, and will throw a syntax error.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">getItems</span>(<span class="pl-smi">fruitList</span>, <span class="pl-smi">favoriteFruit</span>, <span class="pl-k">...</span><span class="pl-v">args</span>) {
  <span class="pl-k">return</span> [<span class="pl-k">...</span>fruitList, <span class="pl-k">...</span>args, favoriteFruit]
}

<span class="pl-en">getItems</span>([<span class="pl-s"><span class="pl-pds">"</span>banana<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>apple<span class="pl-pds">"</span></span>], <span class="pl-s"><span class="pl-pds">"</span>pear<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>orange<span class="pl-pds">"</span></span>)</pre></div>
<p>The above example works. This returns the array <code>[ 'banana', 'apple', 'orange', 'pear' ]</code></p>
<p></p>
</details>
<hr>
<h6><a id="user-content-95-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#95-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>95. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">nums</span>(<span class="pl-smi">a</span>, <span class="pl-smi">b</span>) {
  <span class="pl-k">if</span>
  (a <span class="pl-k">&gt;</span> b)
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>a is bigger<span class="pl-pds">'</span></span>)
  <span class="pl-k">else</span> 
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>b is bigger<span class="pl-pds">'</span></span>)
  <span class="pl-k">return</span> 
  a <span class="pl-k">+</span> b
}

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-en">nums</span>(<span class="pl-c1">4</span>, <span class="pl-c1">2</span>))
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-en">nums</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>))</pre></div>
<ul>
<li>A: <code>a is bigger</code>, <code>6</code> and <code>b is bigger</code>, <code>3</code></li>
<li>B: <code>a is bigger</code>, <code>undefined</code> and <code>b is bigger</code>, <code>undefined</code></li>
<li>C: <code>undefined</code> and <code>undefined</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-24" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-24"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>In JavaScript, we don't <em>have</em> to write the semicolon (<code>;</code>) explicitly, however the JavaScript engine still adds them after statements. This is called <strong>Automatic Semicolon Insertion</strong>. A statement can for example be variables, or keywords like <code>throw</code>, <code>return</code>, <code>break</code>, etc.</p>
<p>Here, we wrote a <code>return</code> statement, and another value <code>a + b</code> on a <em>new line</em>. However, since it's a new line, the engine doesn't know that it's actually the value that we wanted to return. Instead, it automatically added a semicolon after <code>return</code>. You could see this as:</p>
<div class="highlight highlight-source-js"><pre>  <span class="pl-k">return</span>;
  a <span class="pl-k">+</span> b</pre></div>
<p>This means that <code>a + b</code> is never reached, since a function stops running after the <code>return</code> keyword. If no value gets returned, like here, the function returns <code>undefined</code>. Note that there is no automatic insertion after <code>if/else</code> statements!</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-96-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#96-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>96. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">class</span> <span class="pl-en">Person</span> {
  <span class="pl-en">constructor</span>() {
    <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>
  }
}

Person <span class="pl-k">=</span> <span class="pl-k">class</span> <span class="pl-en">AnotherPerson</span> {
  <span class="pl-en">constructor</span>() {
    <span class="pl-c1">this</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Sarah<span class="pl-pds">"</span></span>
  }
}

<span class="pl-k">const</span> <span class="pl-c1">member</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Person</span>()
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">member</span>.<span class="pl-c1">name</span>)</pre></div>
<ul>
<li>A: <code>"Lydia"</code></li>
<li>B: <code>"Sarah"</code></li>
<li>C: <code>Error: cannot redeclare Person</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-25" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-25"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>We can set classes equal to other classes/function constructors. In this case, we set <code>Person</code> equal to <code>AnotherPerson</code>. The name on this constructor is <code>Sarah</code>, so the name property on the new <code>Person</code> instance <code>member</code> is <code>"Sarah"</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-97-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#97-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>97. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">info</span> <span class="pl-k">=</span> {
  [<span class="pl-c1">Symbol</span>(<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>)]<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>
}

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(info)
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-c1">Object</span>.<span class="pl-c1">keys</span>(info))</pre></div>
<ul>
<li>A: <code>{Symbol('a'): 'b'}</code> and <code>["{Symbol('a')"]</code></li>
<li>B: <code>{}</code> and <code>[]</code></li>
<li>C: <code>{ a: "b" }</code> and <code>["a"]</code></li>
<li>D: <code>{Symbol('a'): 'b'}</code> and <code>[]</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-12" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-12"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>A Symbol is not <em>enumerable</em>. The Object.keys method returns all <em>enumerable</em> key properties on an object. The Symbol won't be visible, and an empty array is returned. When logging the entire object, all properties will be visible, even non-enumerable ones.</p>
<p>This is one of the many qualities of a symbol: besides representing an entirely unique value (which prevents accidental name collision on objects, for example when working with 2 libraries that want to add properties to the same object), you can also "hide" properties on objects this way (although not entirely. You can still access symbols using the <code>Object.getOwnPropertySymbols()</code> method).</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-98-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#98-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>98. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">getList</span> <span class="pl-k">=</span> ([<span class="pl-smi">x</span>, <span class="pl-k">...</span><span class="pl-v">y</span>]) <span class="pl-k">=&gt;</span> [x, y]
<span class="pl-k">const</span> <span class="pl-c1">getUser</span> <span class="pl-k">=</span> <span class="pl-smi">user</span> <span class="pl-k">=&gt;</span> { name<span class="pl-k">:</span> <span class="pl-smi">user</span>.<span class="pl-c1">name</span>, age<span class="pl-k">:</span> <span class="pl-smi">user</span>.<span class="pl-smi">age</span> }

<span class="pl-k">const</span> <span class="pl-c1">list</span> <span class="pl-k">=</span> [<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>, <span class="pl-c1">4</span>]
<span class="pl-k">const</span> <span class="pl-c1">user</span> <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>, age<span class="pl-k">:</span> <span class="pl-c1">21</span> }

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-en">getList</span>(list))
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-en">getUser</span>(user))</pre></div>
<ul>
<li>A: <code>[1, [2, 3, 4]]</code> and <code>undefined</code></li>
<li>B: <code>[1, [2, 3, 4]]</code> and <code>{ name: "Lydia", age: 21 }</code></li>
<li>C: <code>[1, 2, 3, 4]</code> and <code>{ name: "Lydia", age: 21 }</code></li>
<li>D: <code>Error</code> and <code>{ name: "Lydia", age: 21 }</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-30" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-30"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>The <code>getList</code> function receives an array as its argument. Between the parentheses of the <code>getList</code> function, we destructure this array right away. You could see this as:</p>
<p><code>[x, ...y] = [1, 2, 3, 4]</code></p>
<p>With the rest parameter <code>...y</code>, we put all "remaining" arguments in an array. The remaining arguments are <code>2</code>, <code>3</code> and <code>4</code> in this case. The value of <code>y</code> is an array, containing all the rest parameters. The value of <code>x</code> is equal to <code>1</code> in this case, so when we log <code>[x, y]</code>, <code>[1, [2, 3, 4]]</code> gets logged.</p>
<p>The <code>getUser</code> function receives an object. With arrow functions, we don't <em>have</em> to write curly brackets if we just return one value. However, if you want to return an <em>object</em> from an arrow function, you have to write it between parentheses, otherwise no value gets returned! The following function would have returned an object:</p>
<p><code>const getUser = user =&gt; ({ name: user.name, age: user.age })</code></p>
<p>Since no value gets returned in this case, the function returns <code>undefined</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-99-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#99-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>99. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-en">name</span>())</pre></div>
<ul>
<li>A: <code>SyntaxError</code></li>
<li>B: <code>ReferenceError</code></li>
<li>C: <code>TypeError</code></li>
<li>D: <code>undefined</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-28" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-28"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>The variable <code>name</code> holds the value of a string, which is not a function, thus cannot invoke.</p>
<p>TypeErrors get thrown when a value is not of the expected type. JavaScript expected <code>name</code> to be a function since we're trying to invoke it. It was a string however, so a TypeError gets thrown: name is not a function!</p>
<p>SyntaxErrors get thrown when you've written something that isn't valid JavaScript, for example when you've written the word <code>return</code> as <code>retrun</code>.
ReferenceErrors get thrown when JavaScript isn't able to find a reference to a value that you're trying to access.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-100-whats-the-value-of-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#100-whats-the-value-of-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>100. What's the value of output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> 🎉✨ This is my 100th question! ✨🎉</span>

<span class="pl-k">const</span> <span class="pl-c1">output</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">`</span><span class="pl-s1"><span class="pl-pse">${</span>[] <span class="pl-k">&amp;&amp;</span> <span class="pl-s"><span class="pl-pds">'</span>Im<span class="pl-pds">'</span></span><span class="pl-pse">}</span></span>possible!</span>
<span class="pl-s">You should<span class="pl-s1"><span class="pl-pse">${</span><span class="pl-s"><span class="pl-pds">'</span><span class="pl-pds">'</span></span> <span class="pl-k">&amp;&amp;</span> <span class="pl-s"><span class="pl-pds">`</span>n't<span class="pl-pds">`</span></span><span class="pl-pse">}</span></span> see a therapist after so much JavaScript lol<span class="pl-pds">`</span></span></pre></div>
<ul>
<li>A: <code>possible! You should see a therapist after so much JavaScript lol</code></li>
<li>B: <code>Impossible! You should see a therapist after so much JavaScript lol</code></li>
<li>C: <code>possible! You shouldn't see a therapist after so much JavaScript lol</code></li>
<li>D: <code>Impossible! You shouldn't see a therapist after so much JavaScript lol</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-26" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-26"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p><code>[]</code> is a truthy value. With the <code>&amp;&amp;</code> operator, the right-hand value will be returned if the left-hand value is a truthy value. In this case, the left-hand value <code>[]</code> is a truthy value, so <code>"Im'</code> gets returned.</p>
<p><code>""</code> is a falsy value. If the left-hand value is falsy, nothing gets returned. <code>n't</code> doesn't get returned.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-101-whats-the-value-of-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#101-whats-the-value-of-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>101. What's the value of output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">one</span> <span class="pl-k">=</span> (<span class="pl-c1">false</span> <span class="pl-k">||</span> {} <span class="pl-k">||</span> <span class="pl-c1">null</span>)
<span class="pl-k">const</span> <span class="pl-c1">two</span> <span class="pl-k">=</span> (<span class="pl-c1">null</span> <span class="pl-k">||</span> <span class="pl-c1">false</span> <span class="pl-k">||</span> <span class="pl-s"><span class="pl-pds">"</span><span class="pl-pds">"</span></span>)
<span class="pl-k">const</span> <span class="pl-c1">three</span> <span class="pl-k">=</span> ([] <span class="pl-k">||</span> <span class="pl-c1">0</span> <span class="pl-k">||</span> <span class="pl-c1">true</span>)

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(one, two, three)</pre></div>
<ul>
<li>A: <code>false</code> <code>null</code> <code>[]</code></li>
<li>B: <code>null</code> <code>""</code> <code>true</code></li>
<li>C: <code>{}</code> <code>""</code> <code>[]</code></li>
<li>D: <code>null</code> <code>null</code> <code>true</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-29" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-29"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>With the <code>||</code> operator, we can return the first truthy operand. If all values are falsy, the last operand gets returned.</p>
<p><code>(false || {} || null)</code>: the empty object <code>{}</code> is a truthy value. This is the first (and only) truthy value, which gets returned. <code>one</code> is equal to <code>{}</code>.</p>
<p><code>(null || false || "")</code>: all operands are falsy values. This means that the past operand, <code>""</code> gets returned. <code>two</code> is equal to <code>""</code>.</p>
<p><code>([] || 0 || "")</code>: the empty array<code>[]</code> is a truthy value. This is the first truthy value, which gets returned. <code>three</code> is equal to <code>[]</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-102-whats-the-value-of-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#102-whats-the-value-of-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>102. What's the value of output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">myPromise</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> <span class="pl-c1">Promise</span>.<span class="pl-c1">resolve</span>(<span class="pl-s"><span class="pl-pds">'</span>I have resolved!<span class="pl-pds">'</span></span>)

<span class="pl-k">function</span> <span class="pl-en">firstFunction</span>() {
  <span class="pl-en">myPromise</span>().<span class="pl-c1">then</span>(<span class="pl-smi">res</span> <span class="pl-k">=&gt;</span> <span class="pl-en">console</span>.<span class="pl-c1">log</span>(res))
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>second<span class="pl-pds">'</span></span>)
}

<span class="pl-k">async</span> <span class="pl-k">function</span> <span class="pl-en">secondFunction</span>() {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-k">await</span> <span class="pl-en">myPromise</span>())
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>second<span class="pl-pds">'</span></span>)
}

<span class="pl-en">firstFunction</span>()
<span class="pl-en">secondFunction</span>()</pre></div>
<ul>
<li>A: <code>I have resolved!</code>, <code>second</code> and <code>I have resolved!</code>, <code>second</code></li>
<li>B: <code>second</code>, <code>I have resolved!</code> and <code>second</code>, <code>I have resolved!</code></li>
<li>C: <code>I have resolved!</code>, <code>second</code> and <code>second</code>, <code>I have resolved!</code></li>
<li>D: <code>second</code>, <code>I have resolved!</code> and <code>I have resolved!</code>, <code>second</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-13" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-13"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>With a promise, we basically say <em>I want to execute this function, but I'll put it aside for now while it's running since this might take a while. Only when a certain value is resolved (or rejected), and when the call stack is empty, I want to use this value.</em></p>
<p>We can get this value with both <code>.then</code> and the <code>await</code> keyword in an <code>async</code> function. Although we can get a promise's value with both <code>.then</code> and <code>await</code>, they work a bit differently.</p>
<p>In the <code>firstFunction</code>, we (sort of) put the myPromise function aside while it was running, but continued running the other code, which is <code>console.log('second')</code> in this case. Then, the function resolved with the string <code>I have resolved</code>, which then got logged after it saw that the callstack was empty.</p>
<p>With the await keyword in <code>secondFunction</code>, we literally pause the execution of an async function until the value has been resolved befoer moving to the next line.</p>
<p>This means that it waited for the <code>myPromise</code> to resolve with the value <code>I have resolved</code>, and only once that happened, we moved to the next line: <code>second</code> got logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-103-whats-the-value-of-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#103-whats-the-value-of-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>103. What's the value of output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">set</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Set</span>()

<span class="pl-smi">set</span>.<span class="pl-c1">add</span>(<span class="pl-c1">1</span>)
<span class="pl-smi">set</span>.<span class="pl-c1">add</span>(<span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>)
<span class="pl-smi">set</span>.<span class="pl-c1">add</span>({ name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span> })

<span class="pl-k">for</span> (<span class="pl-k">let</span> item <span class="pl-k">of</span> set) {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(item <span class="pl-k">+</span> <span class="pl-c1">2</span>)
}</pre></div>
<ul>
<li>A: <code>3</code>, <code>NaN</code>, <code>NaN</code></li>
<li>B: <code>3</code>, <code>7</code>, <code>NaN</code></li>
<li>C: <code>3</code>, <code>Lydia2</code>, <code>[Object object]2</code></li>
<li>D: <code>"12"</code>, <code>Lydia2</code>, <code>[Object object]2</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-30" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-30"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>The <code>+</code> operator is not only used for adding numerical values, but we can also use it to concatenate strings. Whenever the JavaScript engine sees that one or more values are not a number, it coerces the number into a string.</p>
<p>The first one is <code>1</code>, which is a numerical value. <code>1 + 2</code> returns the number 3.</p>
<p>However, the second one is a string <code>"Lydia"</code>. <code>"Lydia"</code> is a string and <code>2</code> is a number: <code>2</code> gets coerced into a string. <code>"Lydia"</code> and <code>"2"</code> get concatenated, which results in the string <code>"Lydia2"</code>.</p>
<p><code>{ name: "Lydia" }</code> is an object. Neither a number nor an object is a string, so it stringifies both. Whenever we stringify a regular object, it becomes <code>"[Object object]"</code>. <code>"[Object object]"</code> concatenated with <code>"2"</code> becomes <code>"[Object object]2"</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-104-whats-its-value" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#104-whats-its-value"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>104. What's its value?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-c1">Promise</span>.<span class="pl-c1">resolve</span>(<span class="pl-c1">5</span>)</pre></div>
<ul>
<li>A: <code>5</code></li>
<li>B: <code>Promise {&lt;pending&gt;: 5}</code></li>
<li>C: <code>Promise {&lt;resolved&gt;: 5}</code></li>
<li>D: <code>Error</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-31" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-31"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>We can pass any type of value we want to <code>Promise.resolve</code>, either a promise or a non-promise. The method itself returns a promise with the resolved value. If you pass a regular function, it'll be a resolved promise with a regular value. If you pass a promise, it'll be a resolved promise with the resolved value of that passed promise.</p>
<p>In this case, we just passed the numerical value <code>5</code>. It returns a resolved promise with the value <code>5</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-105-whats-its-value" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#105-whats-its-value"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>105. What's its value?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span> <span class="pl-en">compareMembers</span>(<span class="pl-smi">person1</span>, <span class="pl-smi">person2</span> <span class="pl-k">=</span> <span class="pl-smi">person</span>) {
  <span class="pl-k">if</span> (person1 <span class="pl-k">!==</span> person2) {
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>Not the same!<span class="pl-pds">"</span></span>)
  } <span class="pl-k">else</span> {
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">"</span>They are the same!<span class="pl-pds">"</span></span>)
  }
}

<span class="pl-k">const</span> <span class="pl-c1">person</span> <span class="pl-k">=</span> { name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span> }

<span class="pl-en">compareMembers</span>(person)</pre></div>
<ul>
<li>A: <code>Not the same!</code></li>
<li>B: <code>They are the same!</code></li>
<li>C: <code>ReferenceError</code></li>
<li>D: <code>SyntaxError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-27" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-27"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>Objects are passed by reference. When we check objects for strict equality (<code>===</code>), we're comparing their references.</p>
<p>We set the default value for <code>person2</code> equal to the <code>person</code> object, and passed the <code>person</code> object as the value for <code>person1</code>.</p>
<p>This means that both values have a reference to the same spot in memory, thus they are equal.</p>
<p>The code block in the <code>else</code> statement gets run, and <code>They are the same!</code> gets logged.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-106-whats-its-value" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#106-whats-its-value"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>106. What's its value?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">colorConfig</span> <span class="pl-k">=</span> {
  red<span class="pl-k">:</span> <span class="pl-c1">true</span>,
  blue<span class="pl-k">:</span> <span class="pl-c1">false</span>,
  green<span class="pl-k">:</span> <span class="pl-c1">true</span>,
  black<span class="pl-k">:</span> <span class="pl-c1">true</span>,
  yellow<span class="pl-k">:</span> <span class="pl-c1">false</span>,
}

<span class="pl-k">const</span> <span class="pl-c1">colors</span> <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">"</span>pink<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>red<span class="pl-pds">"</span></span>, <span class="pl-s"><span class="pl-pds">"</span>blue<span class="pl-pds">"</span></span>]

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">colorConfig</span>.<span class="pl-smi">colors</span>[<span class="pl-c1">1</span>])</pre></div>
<ul>
<li>A: <code>true</code></li>
<li>B: <code>false</code></li>
<li>C: <code>undefined</code></li>
<li>D: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-14" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-14"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>In JavaScript, we have two ways to access properties on an object: bracket notation, or dot notation. In this example, we use dot notation (<code>colorConfig.colors</code>) instead of bracket notation (<code>colorConfig["colors"]</code>).</p>
<p>With dot notation, JavaScript tries to find the property on the object with that exact name. In this example, JavaScript tries to find a property called <code>colors</code> on the <code>colorConfig</code> object. There is no proprety called <code>colors</code>, so this returns <code>undefined</code>. Then, we try to access the value of the first element by using <code>[1]</code>. We cannot do this on a value that's <code>undefined</code>, so it throws a <code>TypeError</code>: <code>Cannot read property '1' of undefined</code>.</p>
<p>JavaScript interprets (or unboxes) statements. When we use bracket notation, it sees the first opening bracket <code>[</code> and keeps going until it finds the closing bracket <code>]</code>. Only then, it will evaluate the statement. If we would've used <code>colorConfig[colors[1]]</code>, it would have returned the value of the <code>red</code> property on the <code>colorConfig</code> object.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-107-whats-its-value" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#107-whats-its-value"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>107. What's its value?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>❤️<span class="pl-pds">'</span></span> <span class="pl-k">===</span> <span class="pl-s"><span class="pl-pds">'</span>❤️<span class="pl-pds">'</span></span>)</pre></div>
<ul>
<li>A: <code>true</code></li>
<li>B: <code>false</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-31" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-31"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>Under the hood, emojis are unicodes. The unicodes for the heart emoji is <code>"U+2764 U+FE0F"</code>. These are always the same for the same emojis, so we're comparing two equal strings to each other, which returns true.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-108-which-of-these-methods-modifies-the-original-array" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#108-which-of-these-methods-modifies-the-original-array"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>108. Which of these methods modifies the original array?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">emojis</span> <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>✨<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>🥑<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>😍<span class="pl-pds">'</span></span>]

<span class="pl-smi">emojis</span>.<span class="pl-en">map</span>(<span class="pl-smi">x</span> <span class="pl-k">=&gt;</span> x <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span>✨<span class="pl-pds">'</span></span>)
<span class="pl-smi">emojis</span>.<span class="pl-en">filter</span>(<span class="pl-smi">x</span> <span class="pl-k">=&gt;</span> x <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">'</span>🥑<span class="pl-pds">'</span></span>)
<span class="pl-smi">emojis</span>.<span class="pl-c1">find</span>(<span class="pl-smi">x</span> <span class="pl-k">=&gt;</span> x <span class="pl-k">!==</span> <span class="pl-s"><span class="pl-pds">'</span>🥑<span class="pl-pds">'</span></span>)
<span class="pl-smi">emojis</span>.<span class="pl-en">reduce</span>((<span class="pl-smi">acc</span>, <span class="pl-smi">cur</span>) <span class="pl-k">=&gt;</span> acc <span class="pl-k">+</span> <span class="pl-s"><span class="pl-pds">'</span>✨<span class="pl-pds">'</span></span>)
<span class="pl-smi">emojis</span>.<span class="pl-c1">slice</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">'</span>✨<span class="pl-pds">'</span></span>) 
<span class="pl-smi">emojis</span>.<span class="pl-c1">splice</span>(<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-s"><span class="pl-pds">'</span>✨<span class="pl-pds">'</span></span>)</pre></div>
<ul>
<li>A: <code>All of them</code></li>
<li>B: <code>map</code> <code>reduce</code> <code>slice</code> <code>splice</code></li>
<li>C: <code>map</code> <code>slice</code> <code>splice</code></li>
<li>D: <code>splice</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-15" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-15"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>With <code>splice</code> method, we modify the original array by deleting, replacing or adding elements. In this case, we removed 2 items from index 1 (we removed <code>'🥑'</code> and <code>'😍'</code>) and added the <g-emoji class="g-emoji" alias="sparkles" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2728.png">✨</g-emoji> emoji instead.</p>
<p><code>map</code>, <code>filter</code> and <code>slice</code> return a new array, <code>find</code> returns an element, and <code>reduce</code> returns a reduced value.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-109-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#109-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a><a name="user-content-20191009"></a>109. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">food</span> <span class="pl-k">=</span> [<span class="pl-s"><span class="pl-pds">'</span>🍕<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>🍫<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>🥑<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>🍔<span class="pl-pds">'</span></span>]
<span class="pl-k">const</span> <span class="pl-c1">info</span> <span class="pl-k">=</span> { favoriteFood<span class="pl-k">:</span> food[<span class="pl-c1">0</span>] }

<span class="pl-smi">info</span>.<span class="pl-smi">favoriteFood</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>🍝<span class="pl-pds">'</span></span>

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(food)</pre></div>
<ul>
<li>A: <code>['🍕', '🍫', '🥑', '🍔']</code></li>
<li>B: <code>['🍝', '🍫', '🥑', '🍔']</code></li>
<li>C: <code>['🍝', '🍕', '🍫', '🥑', '🍔']</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-32" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-32"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>We set the value of the <code>favoriteFood</code> property on the <code>info</code> object equal to the string with the pizza emoji, <code>'🍕'</code>. A string is a primitive data type. In JavaScript, primitive data types act by reference</p>
<p>In JavaScript, primitive data types (everything that's not an object) interact by <em>value</em>. In this case, we set the value of the <code>favoriteFood</code> property on the <code>info</code> object equal to the value of the first element in the <code>food</code> array, the string with the pizza emoji in this case (<code>'🍕'</code>). A string is a primitive data type, and interact by value (see my <a href="https://www.theavocoder.com/complete-javascript/2018/12/21/by-value-vs-by-reference" rel="nofollow">blogpost</a> if you're interested in learning more)</p>
<p>Then, we change the value of the <code>favoriteFood</code> property on the <code>info</code> object. The <code>food</code> array hasn't changed, since the value of <code>favoriteFood</code> was merely a <em>copy</em> of the value of the first element in the array, and doesn't have a reference to the same spot in memory as the element on <code>food[0]</code>. When we log food, it's still the original array, <code>['🍕', '🍫', '🥑', '🍔']</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-110-what-does-this-method-do" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#110-what-does-this-method-do"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>110. What does this method do?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>()</pre></div>
<ul>
<li>A: Parses JSON to a JavaScript value</li>
<li>B: Parses a JavaScript object to JSON</li>
<li>C: Parses any JavaScript value to JSON</li>
<li>D: Parses JSON to a JavaScript object only</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-33" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-33"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>With the <code>JSON.parse()</code> method, we can parse JSON string to a JavaScript value.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-c"><span class="pl-c">//</span> Stringifying a number into valid JSON, then parsing the JSON string to a JavaScript value:</span>
<span class="pl-k">const</span> <span class="pl-c1">jsonNumber</span> <span class="pl-k">=</span> <span class="pl-c1">JSON</span>.<span class="pl-c1">stringify</span>(<span class="pl-c1">4</span>) <span class="pl-c"><span class="pl-c">//</span> '4'</span>
<span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(jsonNumber) <span class="pl-c"><span class="pl-c">//</span> 4</span>

<span class="pl-c"><span class="pl-c">//</span> Stringifying an array value into valid JSON, then parsing the JSON string to a JavaScript value:</span>
<span class="pl-k">const</span> <span class="pl-c1">jsonArray</span> <span class="pl-k">=</span> <span class="pl-c1">JSON</span>.<span class="pl-c1">stringify</span>([<span class="pl-c1">1</span>, <span class="pl-c1">2</span>, <span class="pl-c1">3</span>]) <span class="pl-c"><span class="pl-c">//</span> '[1, 2, 3]'</span>
<span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(jsonArray) <span class="pl-c"><span class="pl-c">//</span> [1, 2, 3]</span>

<span class="pl-c"><span class="pl-c">//</span> Stringifying an object  into valid JSON, then parsing the JSON string to a JavaScript value:</span>
<span class="pl-k">const</span> <span class="pl-c1">jsonArray</span> <span class="pl-k">=</span> <span class="pl-c1">JSON</span>.<span class="pl-c1">stringify</span>({ name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span> }) <span class="pl-c"><span class="pl-c">//</span> '{"name":"Lydia"}'</span>
<span class="pl-c1">JSON</span>.<span class="pl-c1">parse</span>(jsonArray) <span class="pl-c"><span class="pl-c">//</span> { name: 'Lydia' }</span></pre></div>
<p></p>
</details>
<hr>
<h6><a id="user-content-111-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#111-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>111. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">let</span> name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>Lydia<span class="pl-pds">'</span></span>

<span class="pl-k">function</span> <span class="pl-en">getName</span>() {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(name)
  <span class="pl-k">let</span> name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>Sarah<span class="pl-pds">'</span></span>
}

<span class="pl-en">getName</span>()</pre></div>
<ul>
<li>A: Lydia</li>
<li>B: Sarah</li>
<li>C: <code>undefined</code></li>
<li>D: <code>ReferenceError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-d-16" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-d-16"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: D</h4>
<p>Each function has its own <em>execution context</em> (or <em>scope</em>). The <code>getName</code> function first looks within its own context (scope) to see if it contains the variable <code>name</code> we're trying to access. In this case, the <code>getName</code> function contains its own <code>name</code> variable: we declare the variable <code>name</code> with the <code>let</code> keyword, and with the value of <code>'Sarah'</code>.</p>
<p>Variables with the <code>let</code> keyword (and <code>const</code>) are hoisted, but unlike <code>var</code>, don't get <i>initialized</i>. They are not accessible before the line we declare (initialize) them. This is called the "temporal dead zone". When we try to access the variables before they are declared, JavaScript throws a <code>ReferenceError</code>.</p>
<p>If we wouldn't have declared the <code>name</code> variable within the <code>getName</code> function, the javascript engine would've looked down the <em>scope chain</em>. The outer scope has a variable called <code>name</code> with the value of <code>Lydia</code>. In that case, it would've logged <code>Lydia</code>.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-k">let</span> name <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">'</span>Lydia<span class="pl-pds">'</span></span>

<span class="pl-k">function</span> <span class="pl-en">getName</span>() {
  <span class="pl-en">console</span>.<span class="pl-c1">log</span>(name)
}

<span class="pl-en">getName</span>() <span class="pl-c"><span class="pl-c">//</span> Lydia</span></pre></div>
<p></p>
</details>
<hr>
<h6><a id="user-content-112-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#112-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>112. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">function</span><span class="pl-k">*</span> <span class="pl-en">generatorOne</span>() {
  <span class="pl-k">yield</span> [<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>c<span class="pl-pds">'</span></span>];
}

<span class="pl-k">function</span><span class="pl-k">*</span> <span class="pl-en">generatorTwo</span>() {
  <span class="pl-k">yield</span><span class="pl-k">*</span> [<span class="pl-s"><span class="pl-pds">'</span>a<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>b<span class="pl-pds">'</span></span>, <span class="pl-s"><span class="pl-pds">'</span>c<span class="pl-pds">'</span></span>];
}

<span class="pl-k">const</span> <span class="pl-c1">one</span> <span class="pl-k">=</span> <span class="pl-en">generatorOne</span>()
<span class="pl-k">const</span> <span class="pl-c1">two</span> <span class="pl-k">=</span> <span class="pl-en">generatorTwo</span>()

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">one</span>.<span class="pl-c1">next</span>().<span class="pl-c1">value</span>)
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">two</span>.<span class="pl-c1">next</span>().<span class="pl-c1">value</span>)</pre></div>
<ul>
<li>A: <code>a</code> and <code>a</code></li>
<li>B: <code>a</code> and <code>undefined</code></li>
<li>C: <code>['a', 'b', 'c']</code> and <code>a</code></li>
<li>D: <code>a</code> and <code>['a', 'b', 'c']</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-32" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-32"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>With the <code>yield</code> keyword, we <code>yield</code> values in a generator function. With the <code>yield*</code> keyword, we can yield values from another generator function, or iterable object (for example an array).</p>
<p>In <code>generatorOne</code>, we yield the entire array <code>['a', 'b', 'c']</code> using the <code>yield</code> keyword. The value of <code>value</code> property on the object returned by the <code>next</code> method on <code>one</code> (<code>one.next().value</code>) is equal to the entire array <code>['a', 'b', 'c']</code>.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">one</span>.<span class="pl-c1">next</span>().<span class="pl-c1">value</span>) <span class="pl-c"><span class="pl-c">//</span> ['a', 'b', 'c']</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">one</span>.<span class="pl-c1">next</span>().<span class="pl-c1">value</span>) <span class="pl-c"><span class="pl-c">//</span> undefined</span></pre></div>
<p>In <code>generatorTwo</code>, we use the <code>yield*</code> keyword. This means that the first yielded value of <code>two</code>, is equal to the first yielded value in the iterator. The iterator is the array <code>['a', 'b', 'c']</code>. The first yielded value is <code>a</code>, so the first time we call <code>two.next().value</code>, <code>a</code> is returned.</p>
<div class="highlight highlight-source-js"><pre><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">two</span>.<span class="pl-c1">next</span>().<span class="pl-c1">value</span>) <span class="pl-c"><span class="pl-c">//</span> 'a'</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">two</span>.<span class="pl-c1">next</span>().<span class="pl-c1">value</span>) <span class="pl-c"><span class="pl-c">//</span> 'b'</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">two</span>.<span class="pl-c1">next</span>().<span class="pl-c1">value</span>) <span class="pl-c"><span class="pl-c">//</span> 'c'</span>
<span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-smi">two</span>.<span class="pl-c1">next</span>().<span class="pl-c1">value</span>) <span class="pl-c"><span class="pl-c">//</span> undefined</span></pre></div>
<p></p>
</details>
<hr>
<h6><a id="user-content-113-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#113-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>113. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">`</span><span class="pl-s1"><span class="pl-pse">${</span>(<span class="pl-smi">x</span> <span class="pl-k">=&gt;</span> x)(<span class="pl-s"><span class="pl-pds">'</span>I love<span class="pl-pds">'</span></span>)<span class="pl-pse">}</span></span> to program<span class="pl-pds">`</span></span>)</pre></div>
<ul>
<li>A: <code>I love to program</code></li>
<li>B: <code>undefined to program</code></li>
<li>C: <code>${(x =&gt; x)('I love') to program</code></li>
<li>D: <code>TypeError</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-a-34" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-a-34"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: A</h4>
<p>Expressions within template literals are evaluated first. This means that the string will contain the returned value of the expression, the immediately invoked function <code>(x =&gt; x)('I love')</code> in this case. We pass the value <code>'I love'</code> as an argument to the <code>x =&gt; x</code> arrow function. <code>x</code> is equal to <code>'I love'</code>, which gets returned. This results in <code>I love to program</code>.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-114-what-will-happen" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#114-what-will-happen"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>114. What will happen?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">let</span> config <span class="pl-k">=</span> {
  alert<span class="pl-k">:</span> <span class="pl-c1">setInterval</span>(() <span class="pl-k">=&gt;</span> {
    <span class="pl-en">console</span>.<span class="pl-c1">log</span>(<span class="pl-s"><span class="pl-pds">'</span>Alert!<span class="pl-pds">'</span></span>)
  }, <span class="pl-c1">1000</span>)
}

config <span class="pl-k">=</span> <span class="pl-c1">null</span></pre></div>
<ul>
<li>A: The <code>setInterval</code> callback won't be invoked</li>
<li>B: The <code>setInterval</code> callback gets invoked once</li>
<li>C: The <code>setInterval</code> callback will still be called every second</li>
<li>D: We never invoked <code>config.alert()</code>, config is <code>null</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-33" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-33"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>Normally when we set objects equal to <code>null</code>, those objects get <em>garbage collected</em> as there is no reference anymore to that object. However, since the callback function within <code>setInterval</code> is an arrow function (thus bound to the <code>config</code> object), the callback function still holds a reference to the <code>config</code> object. As long as there is a reference, the object won't get garbage collected. Since it's not garbage collected, the <code>setInterval</code> callback function will still get invoked every 1000ms (1s).</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-115-which-methods-will-return-the-value-hello-world" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#115-which-methods-will-return-the-value-hello-world"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>115. Which method(s) will return the value <code>'Hello world!'</code>?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">myMap</span> <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">Map</span>()
<span class="pl-k">const</span> <span class="pl-c1">myFunc</span> <span class="pl-k">=</span> () <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>greeting<span class="pl-pds">'</span></span>

<span class="pl-smi">myMap</span>.<span class="pl-c1">set</span>(myFunc, <span class="pl-s"><span class="pl-pds">'</span>Hello world!<span class="pl-pds">'</span></span>)

<span class="pl-c"><span class="pl-c">//</span>1</span>
<span class="pl-smi">myMap</span>.<span class="pl-c1">get</span>(<span class="pl-s"><span class="pl-pds">'</span>greeting<span class="pl-pds">'</span></span>)
<span class="pl-c"><span class="pl-c">//</span>2</span>
<span class="pl-smi">myMap</span>.<span class="pl-c1">get</span>(myFunc)
<span class="pl-c"><span class="pl-c">//</span>3</span>
<span class="pl-smi">myMap</span>.<span class="pl-c1">get</span>(() <span class="pl-k">=&gt;</span> <span class="pl-s"><span class="pl-pds">'</span>greeting<span class="pl-pds">'</span></span>)</pre></div>
<ul>
<li>A: 1</li>
<li>B: 2</li>
<li>C: 2 and 3</li>
<li>D: All of them</li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-b-28" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-b-28"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: B</h4>
<p>When adding a key/value pair using the <code>set</code> method, the key will be the value of the first argument passed to the <code>set</code> function, and the value will be the second argument passed to the <code>set</code> function. The key is the <em>function</em> <code>() =&gt; 'greeting'</code> in this case, and the value <code>'Hello world'</code>. <code>myMap</code> is now <code>{ () =&gt; 'greeting' =&gt; 'Hello world!' }</code>.</p>
<p>1 is wrong, since the key is not <code>'greeting'</code> but <code>() =&gt; 'greeting'</code>.
3 is wrong, since we're creating a new function by passing it as a parameter to the <code>get</code> method. Object interact by <em>reference</em>. Functions are objects, which is why two functions are never strictly equal, even if they are identical: they have a reference to a different spot in memory.</p>
<p></p>
</details>
<hr>
<h6><a id="user-content-116-whats-the-output" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#116-whats-the-output"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>116. What's the output?</h6>
<div class="highlight highlight-source-js"><pre><span class="pl-k">const</span> <span class="pl-c1">person</span> <span class="pl-k">=</span> {
  name<span class="pl-k">:</span> <span class="pl-s"><span class="pl-pds">"</span>Lydia<span class="pl-pds">"</span></span>,
  age<span class="pl-k">:</span> <span class="pl-c1">21</span>
}

<span class="pl-k">const</span> <span class="pl-c1">changeAge</span> <span class="pl-k">=</span> (<span class="pl-smi">x</span> <span class="pl-k">=</span> { <span class="pl-k">...</span>person }) <span class="pl-k">=&gt;</span> <span class="pl-smi">x</span>.<span class="pl-smi">age</span> <span class="pl-k">+=</span> <span class="pl-c1">1</span>
<span class="pl-k">const</span> <span class="pl-c1">changeAgeAndName</span> <span class="pl-k">=</span> (<span class="pl-smi">x</span> <span class="pl-k">=</span> { <span class="pl-k">...</span>person }) <span class="pl-k">=&gt;</span> {
  <span class="pl-smi">x</span>.<span class="pl-smi">age</span> <span class="pl-k">+=</span> <span class="pl-c1">1</span>
  <span class="pl-smi">x</span>.<span class="pl-c1">name</span> <span class="pl-k">=</span> <span class="pl-s"><span class="pl-pds">"</span>Sarah<span class="pl-pds">"</span></span>
}

<span class="pl-en">changeAge</span>(person)
<span class="pl-en">changeAgeAndName</span>()

<span class="pl-en">console</span>.<span class="pl-c1">log</span>(person)</pre></div>
<ul>
<li>A: <code>{name: "Sarah", age: 22}</code></li>
<li>B: <code>{name: "Sarah", age: 23}</code></li>
<li>C: <code>{name: "Lydia", age: 22}</code></li>
<li>D: <code>{name: "Lydia", age: 23}</code></li>
</ul>
<details><summary><b>Answer</b></summary>
<p>
</p><h4><a id="user-content-answer-c-34" class="anchor" aria-hidden="true" href="https://github.com/lydiahallie/javascript-questions#answer-c-34"><svg class="octicon octicon-link" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Answer: C</h4>
<p>Both the <code>changeAge</code> and <code>changeAgeAndName</code> functions have a default parameter, namely a <em>newly</em> created object <code>{ ...person }</code>. This object has copies of all the key/values in the <code>person</code> object.</p>
<p>First, we invoke the <code>changeAge</code> function and pass the <code>person</code> object as its argument. This function increases the value of the <code>age</code> property by 1. <code>person</code> is now <code>{ name: "Lydia", age: 22 }</code>.</p>
<p>Then, we invoke the <code>changeAgeAndName</code> function, however we don't pass a parameter. Instead, the value of <code>x</code> is equal to a <em>new</em> object: <code>{ ...person }</code>. Since it's a new object, it doesn't affect the values of the properties on the <code>person</code> object. <code>person</code> is still equal to <code>{ name: "Lydia", age: 22 }</code>.</p>
<p></p>
</details>
</article>
      </div>
  </div>



  </div>
</div>

    </main>
  </div>
  

  </div>

        
<div class="footer container-lg width-full px-3" role="contentinfo">
  <div class="position-relative d-flex flex-justify-between pt-6 pb-2 mt-6 f6 text-gray border-top border-gray-light ">
    <ul class="list-style-none d-flex flex-wrap ">
      <li class="mr-3">© 2019 <span title="0.27196s from unicorn-857f4f8788-7drkh">GitHub</span>, Inc.</li>
        <li class="mr-3"><a data-ga-click="Footer, go to terms, text:terms" href="https://github.com/site/terms">Terms</a></li>
        <li class="mr-3"><a data-ga-click="Footer, go to privacy, text:privacy" href="https://github.com/site/privacy">Privacy</a></li>
        <li class="mr-3"><a data-ga-click="Footer, go to security, text:security" href="https://github.com/security">Security</a></li>
        <li class="mr-3"><a href="https://githubstatus.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a data-ga-click="Footer, go to help, text:help" href="https://help.github.com/">Help</a></li>
    </ul>

    <a aria-label="Homepage" title="GitHub" class="footer-octicon d-none d-lg-block mx-lg-4" href="https://github.com/">
      <svg height="24" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"></path></svg>
</a>
   <ul class="list-style-none d-flex flex-wrap ">
        <li class="mr-3"><a data-ga-click="Footer, go to contact, text:contact" href="https://github.com/contact">Contact GitHub</a></li>
        <li class="mr-3"><a href="https://github.com/pricing" data-ga-click="Footer, go to Pricing, text:Pricing">Pricing</a></li>
      <li class="mr-3"><a href="https://developer.github.com/" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li class="mr-3"><a href="https://training.github.com/" data-ga-click="Footer, go to training, text:training">Training</a></li>
        <li class="mr-3"><a href="https://github.blog/" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a data-ga-click="Footer, go to about, text:about" href="https://github.com/about">About</a></li>

    </ul>
  </div>
  <div class="d-flex flex-justify-center pb-6">
    <span class="f6 text-gray-light"></span>
  </div>
</div>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 000 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 00.01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"></path></svg>
    </button>
    You can’t perform that action at this time.
  </div>


    
    <script crossorigin="anonymous" integrity="sha512-hcybWmnZc/MmTSqQy1XHK+BnCKGf74XHXtSJUqDjQbGCitPaKuZomLtzEnWzud5zyr0Cx5cowKxapak6m711cg==" type="application/javascript" src="./GitHub-JS-QA_files/frameworks-fcbb97e8.js"></script>
    
    <script crossorigin="anonymous" async="async" integrity="sha512-mEhViOqajTVIWIt8vaNeZgWVSKFCUJuydMJcDSsZGeWRk/vg1IodwsjZNLW6zpqHESnkvCRcBkYkF1oGf0uMeQ==" type="application/javascript" src="./GitHub-JS-QA_files/github-bootstrap-f844e701.js"></script>
    
    
    
  <div class="js-stale-session-flash flash flash-warn flash-banner" hidden="">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 000 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 00.01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg>
    <span class="js-stale-session-flash-signed-in" hidden="">You signed in with another tab or window. <a href="https://github.com/lydiahallie/javascript-questions">Reload</a> to refresh your session.</span>
    <span class="js-stale-session-flash-signed-out" hidden="">You signed out in another tab or window. <a href="https://github.com/lydiahallie/javascript-questions">Reload</a> to refresh your session.</span>
  </div>
  <template id="site-details-dialog"></template>

  <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box box-shadow-large" style="width:360px;">
  </div>
</div>

  <div aria-live="polite" class="js-global-screen-reader-notice sr-only"></div>

  


</body></html>